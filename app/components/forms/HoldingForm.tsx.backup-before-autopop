
'use client';

import React, { useState, useCallback, useMemo } from 'react';
import { type CurrencyCode } from '@/app/lib/currency';
import { HoldingFormData } from '@/app/lib/types/shared';
import CurrencySelector from '../CurrencySelector';
import HoldingConfirmation, { ConfirmedHoldingData } from '../HoldingConfirmation';
import { PriceDetectionResult } from '../../lib/priceDetection';
import { WeightedAverageResult, calculateWeightedAverage } from '../../lib/weightedAverage';

interface HoldingFormProps {
  categoryName: string;
  holdingId?: string;
  formData: HoldingFormData;
  onFormDataChange: (data: HoldingFormData) => void;
  onSubmit: (categoryName: string, holdingId?: string) => void;
  onCancel: () => void;
  loading: boolean;
}

const HoldingForm = React.memo(({ 
  categoryName, 
  holdingId, 
  formData, 
  onFormDataChange, 
  onSubmit, 
  onCancel, 
  loading 
}: HoldingFormProps) => {
  const [priceDetection, setPriceDetection] = useState<PriceDetectionResult | null>(null);
  const [priceDetectionLoading, setPriceDetectionLoading] = useState(false);
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [weightedAverage, setWeightedAverage] = useState<WeightedAverageResult | null>(null);

  // Stable event handlers
  const handleSymbolChange = useCallback(async (e: React.ChangeEvent<HTMLInputElement>) => {
    const symbol = e.target.value.toUpperCase();
    onFormDataChange({ ...formData, symbol });
    
    if (symbol.length >= 2) {
      setPriceDetectionLoading(true);
      try {
        const response = await fetch('/api/prices/detect', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ symbol })
        });
        const detection = await response.json();
        setPriceDetection(detection);
      } catch (error) {
        console.error('Price detection failed:', error);
        setPriceDetection(null);
      } finally {
        setPriceDetectionLoading(false);
      }
    } else {
      setPriceDetection(null);
    }
  }, [formData, onFormDataChange]);

  const handleNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    onFormDataChange({ ...formData, name: e.target.value });
  }, [formData, onFormDataChange]);

  const handleLocationChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    onFormDataChange({ ...formData, location: e.target.value });
  }, [formData, onFormDataChange]);

  const handleCurrencyChange = useCallback((currency: CurrencyCode) => {
    onFormDataChange({ ...formData, currency });
  }, [formData, onFormDataChange]);

  const handleAmountChange = useCallback((amount: number) => {
    onFormDataChange({ ...formData, amount });
  }, [formData, onFormDataChange]);

  const handleSubmit = useCallback(async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.symbol || !formData.name || !formData.amount) return;
    
    // If we have price detection and this is an "add" operation, show confirmation
    if (!holdingId && priceDetection && priceDetection.supportsAutoPricing) {
      try {
        const avgResult = await calculateWeightedAverage(
          formData.symbol,
          formData.amount / (priceDetection.currentPrice || 1),
          priceDetection.currentPrice || 0,
          formData.amount
        );
        
        setWeightedAverage(avgResult);
        setShowConfirmation(true);
        return;
      } catch (error) {
        console.error('Weighted average calculation failed:', error);
      }
    }
    
    // Direct submit for edits or non-auto-pricing holdings
    onSubmit(categoryName, holdingId);
  }, [categoryName, holdingId, onSubmit, formData, priceDetection]);

  const handleConfirmation = useCallback((confirmedData: ConfirmedHoldingData) => {
    // Update form data with confirmed pricing details
    onFormDataChange({
      ...formData,
      quantity: confirmedData.quantity,
      unitPrice: confirmedData.unitPrice,
      amount: confirmedData.totalCost
    });
    
    setShowConfirmation(false);
    onSubmit(categoryName, holdingId);
  }, [formData, onFormDataChange, onSubmit, categoryName, holdingId]);

  const handleCancelConfirmation = useCallback(() => {
    setShowConfirmation(false);
    setWeightedAverage(null);
  }, []);

  // Stable styles with proper containment
  const containerStyle = useMemo(() => ({
    contain: 'layout style' as const,
    isolation: 'isolate' as const
  }), []);

  const gridStyle = useMemo(() => ({
    display: 'grid' as const,
    gridTemplateColumns: 'repeat(2, 1fr)' as const,
    gap: '0.75rem',
    contain: 'layout' as const
  }), []);

  const inputStyle = useMemo(() => ({
    minHeight: '40px',
    boxSizing: 'border-box' as const
  }), []);

  // Show confirmation dialog if needed
  if (showConfirmation && priceDetection && weightedAverage) {
    return (
      <div style={containerStyle}>
        <HoldingConfirmation
          symbol={formData.symbol}
          name={formData.name}
          totalAmount={formData.amount}
          currency={formData.currency}
          priceDetection={priceDetection}
          weightedAverage={weightedAverage}
          onConfirm={handleConfirmation}
          onEdit={handleCancelConfirmation}
          onCancel={handleCancelConfirmation}
        />
      </div>
    );
  }

  return (
    <div 
      className="bg-slate-800 rounded-lg p-4 border border-slate-600 mb-4"
      style={containerStyle}
    >
      <h4 className="text-white font-medium mb-3">
        {holdingId ? 'Edit Holding' : `Add to ${categoryName}`}
      </h4>
      
      <form onSubmit={handleSubmit}>
        <div className="space-y-3 mb-4">
          <div style={gridStyle}>
            <input
              type="text"
              placeholder="Symbol (e.g., AAPL)"
              value={formData.symbol}
              onChange={handleSymbolChange}
              className="w-full bg-slate-700 text-white border border-slate-600 rounded px-3 py-2 text-sm"
              autoComplete="off"
              disabled={loading}
              style={inputStyle}
            />
            
            <input
              type="text"
              placeholder="Company Name"
              value={formData.name}
              onChange={handleNameChange}
              className="w-full bg-slate-700 text-white border border-slate-600 rounded px-3 py-2 text-sm"
              autoComplete="off"
              disabled={loading}
              style={inputStyle}
            />
          </div>
          
          {/* Price detection indicator */}
          {priceDetectionLoading && (
            <div className="text-xs text-blue-400">üîç Checking pricing...</div>
          )}
          {priceDetection && !priceDetectionLoading && (
            <div className="text-xs">
              {priceDetection.supportsAutoPricing ? (
                <span className="text-green-400">
                  üü¢ Auto-pricing: ${priceDetection.currentPrice?.toFixed(2)} ({priceDetection.source.toUpperCase()})
                </span>
              ) : (
                <span className="text-amber-400">
                  üîÑ Manual pricing required
                </span>
              )}
            </div>
          )}
          
          <div style={inputStyle}>
            <CurrencySelector
              value={formData.amount}
              currency={formData.currency}
              onValueChange={handleAmountChange}
              onCurrencyChange={handleCurrencyChange}
              label="Amount"
              disabled={loading}
            />
          </div>
          
          <input
            type="text"
            placeholder="Location (e.g., IBKR)"
            value={formData.location}
            onChange={handleLocationChange}
            className="w-full bg-slate-700 text-white border border-slate-600 rounded px-3 py-2 text-sm"
            autoComplete="off"
            disabled={loading}
            style={inputStyle}
          />
        </div>
        
        <div className="flex gap-2">
          <button
            type="submit"
            disabled={loading || !formData.symbol || !formData.name || !formData.amount}
            className="bg-emerald-600 text-white px-4 py-2 rounded text-sm font-medium hover:bg-emerald-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {loading ? 'Saving...' : holdingId ? 'Update' : (showConfirmation ? 'Review Details' : 'Add Holding')}
          </button>
          
          <button
            type="button"
            onClick={onCancel}
            className="bg-slate-600 text-white px-4 py-2 rounded text-sm font-medium hover:bg-slate-700 transition-colors"
          >
            Cancel
          </button>
        </div>
      </form>
    </div>
  );
});

HoldingForm.displayName = 'HoldingForm';

export default HoldingForm;
