'use client';

import { useState } from 'react';

interface YearlyData {
  year: number;
  netWorth: number;
  annualInvestment: number;
  marketGains: number; // calculated field
  returnPercent: number; // calculated field
}

export default function NetWorthTracker() {
  // Your actual data with corrected timeline + market gains calculated
  const [yearlyData, setYearlyData] = useState<YearlyData[]>([
    { year: 2018, netWorth: 21200, annualInvestment: 20000, marketGains: 1200, returnPercent: 6.0 },
    { year: 2019, netWorth: 113547, annualInvestment: 75303, marketGains: 17044, returnPercent: 18.2 },
    { year: 2020, netWorth: 269083, annualInvestment: 78316, marketGains: 77220, returnPercent: 40.4 },
    { year: 2021, netWorth: 578896, annualInvestment: 71600, marketGains: 238197, returnPercent: 115.1 },
    { year: 2022, netWorth: 346000, annualInvestment: 26000, marketGains: -232896, returnPercent: -40.2 },
    { year: 2023, netWorth: 385530, annualInvestment: 20000, marketGains: 19530, returnPercent: 11.4 },
    { year: 2024, netWorth: 520000, annualInvestment: 30000, marketGains: 104470, returnPercent: 34.9 },
    { year: 2025, netWorth: 487000, annualInvestment: 30000, marketGains: -33000, returnPercent: -6.3 }
  ]);

  const [showAddForm, setShowAddForm] = useState(false);

  // Calculate key metrics
  const totalInvested = yearlyData.reduce((sum, data) => sum + data.annualInvestment, 0);
  const currentNetWorth = yearlyData[yearlyData.length - 1]?.netWorth || 0;
  const totalGains = currentNetWorth - totalInvested;
  const totalReturn = totalInvested > 0 ? ((totalGains / totalInvested) * 100) : 0;
  
  // Find best and worst years
  const bestYear = yearlyData.reduce((best, current) => 
    current.returnPercent > best.returnPercent ? current : best
  );
  
  const worstYear = yearlyData.reduce((worst, current) => 
    current.returnPercent < worst.returnPercent ? current : worst
  );

  // Chart dimensions and scaling
  const chartWidth = 800;
  const chartHeight = 300;
  const padding = 80;
  const plotWidth = chartWidth - 2 * padding;
  const plotHeight = chartHeight - 80; // Leave space for labels
  
  const maxNetWorth = Math.max(...yearlyData.map(d => d.netWorth));
  const maxInvestment = Math.max(...yearlyData.map(d => d.annualInvestment));
  const maxGains = Math.max(...yearlyData.map(d => Math.abs(d.marketGains)));
  
  // Scale for investment bars (relative to max investment)
  const investmentScale = 80; // Max height for investment bars
  const gainsScale = 150; // Max height for gains/losses
  
  const addNewYear = (year: number, netWorth: number, annualInvestment: number) => {
    // Calculate market gains
    const previousNetWorth = yearlyData.find(d => d.year === year - 1)?.netWorth || 0;
    const marketGains = netWorth - previousNetWorth - annualInvestment;
    const returnPercent = previousNetWorth > 0 ? ((marketGains / previousNetWorth) * 100) : 0;
    
    const newData = [...yearlyData, { year, netWorth, annualInvestment, marketGains, returnPercent }]
      .sort((a, b) => a.year - b.year);
    setYearlyData(newData);
    setShowAddForm(false);
  };

  return (
    <div className="bg-slate-800/70 backdrop-blur-xl border border-slate-700/50 rounded-2xl p-6 mb-6 transition-all duration-300 hover:bg-slate-800/80 hover:scale-[1.01] shadow-sm hover:shadow-lg">
      
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <div>
          <h2 className="text-xl font-bold text-white mb-1">Net Worth Journey</h2>
          <p className="text-sm text-slate-400">Investment contributions vs market performance over time</p>
        </div>
        <div className="flex gap-4 items-center">
          {/* Legend */}
          <div className="hidden md:flex gap-4 text-xs">
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 bg-slate-500 rounded-sm"></div>
              <span className="text-slate-400">Net Worth</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 bg-indigo-500 rounded-sm"></div>
              <span className="text-slate-400">Investment</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 bg-emerald-500 rounded-sm"></div>
              <span className="text-slate-400">Gains</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 bg-red-500 rounded-sm"></div>
              <span className="text-slate-400">Losses</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 bg-amber-500 rounded-full"></div>
              <span className="text-slate-400">% Return</span>
            </div>
          </div>
          <button
            onClick={() => setShowAddForm(true)}
            className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors text-sm font-medium"
          >
            Add Year
          </button>
        </div>
      </div>

      {/* Enhanced Chart */}
      <div className="bg-slate-900/50 rounded-lg p-4 mb-6 overflow-x-auto">
        <svg width="100%" height={chartHeight} viewBox={`0 0 ${chartWidth} ${chartHeight}`} className="min-w-[800px]">
          <defs>
            {/* Gradient for net worth area */}
            <linearGradient id="netWorthGradient" x1="0%" y1="0%" x2="0%" y2="100%">
              <stop offset="0%" style={{ stopColor: '#6b7280', stopOpacity: 0.3 }} />
              <stop offset="100%" style={{ stopColor: '#6b7280', stopOpacity: 0.1 }} />
            </linearGradient>
          </defs>
          
          {/* Grid lines */}
          {[0, 0.25, 0.5, 0.75, 1].map((ratio) => {
            const y = padding + (ratio * plotHeight);
            return (
              <g key={ratio}>
                <line
                  x1={padding}
                  y1={y}
                  x2={chartWidth - padding}
                  y2={y}
                  stroke="#374151"
                  strokeWidth="1"
                  strokeDasharray="2,2"
                  opacity="0.5"
                />
                <text
                  x={padding - 10}
                  y={y + 4}
                  fill="#94a3b8"
                  fontSize="11"
                  textAnchor="end"
                >
                  ${((maxNetWorth * (1 - ratio)) / 1000).toFixed(0)}k
                </text>
              </g>
            );
          })}
          
          {/* X-axis labels and data visualization */}
          {yearlyData.map((data, index) => {
            const x = padding + (index / (yearlyData.length - 1)) * plotWidth;
            const netWorthY = padding + ((maxNetWorth - data.netWorth) / maxNetWorth) * plotHeight;
            
            // Investment bar height
            const investmentHeight = (data.annualInvestment / maxInvestment) * investmentScale;
            const investmentY = chartHeight - 60 - investmentHeight;
            
            // Gains/losses bar
            const gainsHeight = Math.abs(data.marketGains / maxGains) * gainsScale;
            const gainsY = data.marketGains >= 0 
              ? investmentY - gainsHeight 
              : investmentY;
            
            return (
              <g key={data.year}>
                {/* Investment bar (blue) */}
                <rect
                  x={x - 8}
                  y={investmentY}
                  width="16"
                  height={investmentHeight}
                  fill="#6366f1"
                  opacity="0.8"
                  rx="2"
                />
                
                {/* Market gains/losses bar */}
                <rect
                  x={x - 8}
                  y={gainsY}
                  width="16"
                  height={gainsHeight}
                  fill={data.marketGains >= 0 ? "#10b981" : "#ef4444"}
                  opacity="0.9"
                  rx="2"
                />
                
                {/* Year label */}
                <text
                  x={x}
                  y={chartHeight - 20}
                  fill="#94a3b8"
                  fontSize="12"
                  textAnchor="middle"
                >
                  {data.year === 2025 ? '2025*' : data.year}
                </text>
                
                {/* Net worth value */}
                <text
                  x={x}
                  y={netWorthY - 8}
                  fill="white"
                  fontSize="10"
                  textAnchor="middle"
                  fontWeight="bold"
                >
                  ${(data.netWorth / 1000).toFixed(0)}k
                </text>
                
                {/* Return percentage */}
                <circle
                  cx={x}
                  cy={netWorthY + 20}
                  r="2"
                  fill="#f59e0b"
                />
                <text
                  x={x}
                  y={netWorthY + 15}
                  fill="#f59e0b"
                  fontSize="9"
                  textAnchor="middle"
                  fontWeight="bold"
                >
                  {data.returnPercent >= 0 ? '+' : ''}{data.returnPercent.toFixed(0)}%
                </text>
              </g>
            );
          })}
          
          {/* Net Worth Area */}
          <path
            d={`M ${padding} ${chartHeight - 60} ${yearlyData.map((data, index) => {
              const x = padding + (index / (yearlyData.length - 1)) * plotWidth;
              const y = padding + ((maxNetWorth - data.netWorth) / maxNetWorth) * plotHeight;
              return `L ${x} ${y}`;
            }).join(' ')} L ${padding + plotWidth} ${chartHeight - 60} Z`}
            fill="url(#netWorthGradient)"
          />
          
          {/* Net Worth Line */}
          <path
            d={`M ${yearlyData.map((data, index) => {
              const x = padding + (index / (yearlyData.length - 1)) * plotWidth;
              const y = padding + ((maxNetWorth - data.netWorth) / maxNetWorth) * plotHeight;
              return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;
            }).join(' ')}`}
            fill="none"
            stroke="#6b7280"
            strokeWidth="3"
            strokeLinecap="round"
            strokeLinejoin="round"
          />
          
          {/* Return Percentage Line */}
          <path
            d={`M ${yearlyData.map((data, index) => {
              const x = padding + (index / (yearlyData.length - 1)) * plotWidth;
              const baseY = padding + ((maxNetWorth - data.netWorth) / maxNetWorth) * plotHeight;
              const returnY = baseY + 20; // Offset from net worth line
              return `${index === 0 ? 'M' : 'L'} ${x} ${returnY}`;
            }).join(' ')}`}
            fill="none"
            stroke="#f59e0b"
            strokeWidth="2"
            strokeDasharray="4,4"
            opacity="0.8"
          />
        </svg>
        
        <div className="text-center text-xs text-slate-500 mt-2">
          * 2025 as on date
        </div>
      </div>

      {/* Key Metrics Row */}
      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3 mb-6">
        <div className="bg-slate-700/50 rounded-lg p-3 text-center">
          <div className="text-lg font-bold text-indigo-400">
            ${(currentNetWorth / 1000).toFixed(0)}k
          </div>
          <div className="text-xs text-slate-400">Current Net Worth</div>
        </div>
        
        <div className="bg-slate-700/50 rounded-lg p-3 text-center">
          <div className="text-lg font-bold text-blue-400">
            ${(totalInvested / 1000).toFixed(0)}k
          </div>
          <div className="text-xs text-slate-400">Total Invested</div>
        </div>
        
        <div className="bg-slate-700/50 rounded-lg p-3 text-center">
          <div className={`text-lg font-bold ${totalGains >= 0 ? 'text-emerald-400' : 'text-red-400'}`}>
            {totalGains >= 0 ? '+' : ''}${(totalGains / 1000).toFixed(0)}k
          </div>
          <div className="text-xs text-slate-400">Total Gains</div>
        </div>
        
        <div className="bg-slate-700/50 rounded-lg p-3 text-center">
          <div className={`text-lg font-bold ${totalReturn >= 0 ? 'text-emerald-400' : 'text-red-400'}`}>
            {totalReturn >= 0 ? '+' : ''}{totalReturn.toFixed(1)}%
          </div>
          <div className="text-xs text-slate-400">Total Return</div>
        </div>
        
        <div className="bg-slate-700/50 rounded-lg p-3 text-center">
          <div className="text-lg font-bold text-emerald-400">
            {bestYear.year}
          </div>
          <div className="text-xs text-slate-400">Best Year (+{bestYear.returnPercent.toFixed(0)}%)</div>
        </div>
        
        <div className="bg-slate-700/50 rounded-lg p-3 text-center">
          <div className="text-lg font-bold text-red-400">
            {worstYear.year}
          </div>
          <div className="text-xs text-slate-400">Worst Year ({worstYear.returnPercent.toFixed(0)}%)</div>
        </div>
      </div>

      {/* Add New Year Form */}
      {showAddForm && (
        <AddYearForm onAdd={addNewYear} onCancel={() => setShowAddForm(false)} />
      )}
    </div>
  );
}

function AddYearForm({ onAdd, onCancel }: { 
  onAdd: (year: number, netWorth: number, annualInvestment: number) => void; 
  onCancel: () => void; 
}) {
  const [formData, setFormData] = useState({
    year: new Date().getFullYear().toString(),
    netWorth: '',
    annualInvestment: ''
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onAdd(
      parseInt(formData.year),
      parseFloat(formData.netWorth),
      parseFloat(formData.annualInvestment)
    );
  };

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50">
      <div className="bg-slate-800 rounded-xl p-6 w-full max-w-md border border-slate-700">
        <h3 className="text-lg font-bold text-white mb-4">Add New Year Data</h3>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-slate-300 mb-1">Year</label>
            <input
              type="number"
              value={formData.year}
              onChange={(e) => setFormData({ ...formData, year: e.target.value })}
              className="w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white placeholder-slate-400 focus:border-indigo-500 focus:outline-none"
              required
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-slate-300 mb-1">Net Worth ($)</label>
            <input
              type="number"
              step="0.01"
              value={formData.netWorth}
              onChange={(e) => setFormData({ ...formData, netWorth: e.target.value })}
              className="w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white placeholder-slate-400 focus:border-indigo-500 focus:outline-none"
              required
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-slate-300 mb-1">Annual Investment ($)</label>
            <input
              type="number"
              step="0.01"
              value={formData.annualInvestment}
              onChange={(e) => setFormData({ ...formData, annualInvestment: e.target.value })}
              className="w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white placeholder-slate-400 focus:border-indigo-500 focus:outline-none"
              required
            />
          </div>
          
          <div className="flex gap-3 pt-2">
            <button
              type="submit"
              className="flex-1 bg-indigo-600 text-white py-2 px-4 rounded-lg hover:bg-indigo-700 transition-colors font-medium"
            >
              Add Year
            </button>
            <button
              type="button"
              onClick={onCancel}
              className="flex-1 bg-slate-600 text-white py-2 px-4 rounded-lg hover:bg-slate-700 transition-colors font-medium"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}-red-300">
            {worstYear.growth >= 0 ? '+' : ''}${(worstYear.growth / 1000).toFixed(0)}k ({worstYear.growthPercent.toFixed(1)}%)
          </div>
        </div>
      </div>

      {/* Data Table */}
      <div className="bg-slate-900/50 rounded-lg overflow-hidden">
        <div className="grid grid-cols-4 gap-4 p-3 border-b border-slate-700 text-sm font-medium text-slate-400">
          <div>Year</div>
          <div>Net Worth</div>
          <div>Annual Investment</div>
          <div>Growth</div>
        </div>
        {yearlyData.map((data, index) => {
          const growth = index > 0 ? data.netWorth - yearlyData[index - 1].netWorth : 0;
          const growthPercent = index > 0 && yearlyData[index - 1].netWorth > 0 
            ? ((growth / yearlyData[index - 1].netWorth) * 100) 
            : 0;
            
          return (
            <div key={data.year} className="grid grid-cols-4 gap-4 p-3 border-b border-slate-800 text-sm">
              <div className="text-white font-medium">{data.year}</div>
              <div className="text-slate-300">${data.netWorth.toLocaleString()}</div>
              <div className="text-slate-300">${data.annualInvestment.toLocaleString()}</div>
              <div className={index === 0 ? 'text-slate-500' : growth >= 0 ? 'text-emerald-400' : 'text-red-400'}>
                {index === 0 ? 'Starting point' : `${growth >= 0 ? '+' : ''}${(growth / 1000).toFixed(0)}k (${growthPercent.toFixed(1)}%)`}
              </div>
            </div>
          );
        })}
      </div>

      {/* Add New Year Form */}
      {showAddForm && (
        <AddYearForm onAdd={addNewYear} onCancel={() => setShowAddForm(false)} />
      )}
    </div>
  );
}

function AddYearForm({ onAdd, onCancel }: { 
  onAdd: (year: number, netWorth: number, annualInvestment: number) => void; 
  onCancel: () => void; 
}) {
  const [formData, setFormData] = useState({
    year: new Date().getFullYear().toString(),
    netWorth: '',
    annualInvestment: ''
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onAdd(
      parseInt(formData.year),
      parseFloat(formData.netWorth),
      parseFloat(formData.annualInvestment)
    );
  };

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50">
      <div className="bg-slate-800 rounded-xl p-6 w-full max-w-md border border-slate-700">
        <h3 className="text-lg font-bold text-white mb-4">Add New Year Data</h3>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-slate-300 mb-1">Year</label>
            <input
              type="number"
              value={formData.year}
              onChange={(e) => setFormData({ ...formData, year: e.target.value })}
              className="w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white placeholder-slate-400 focus:border-indigo-500 focus:outline-none"
              required
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-slate-300 mb-1">Net Worth ($)</label>
            <input
              type="number"
              step="0.01"
              value={formData.netWorth}
              onChange={(e) => setFormData({ ...formData, netWorth: e.target.value })}
              className="w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white placeholder-slate-400 focus:border-indigo-500 focus:outline-none"
              required
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-slate-300 mb-1">Annual Investment ($)</label>
            <input
              type="number"
              step="0.01"
              value={formData.annualInvestment}
              onChange={(e) => setFormData({ ...formData, annualInvestment: e.target.value })}
              className="w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white placeholder-slate-400 focus:border-indigo-500 focus:outline-none"
              required
            />
          </div>
          
          <div className="flex gap-3 pt-2">
            <button
              type="submit"
              className="flex-1 bg-indigo-600 text-white py-2 px-4 rounded-lg hover:bg-indigo-700 transition-colors font-medium"
            >
              Add Year
            </button>
            <button
              type="button"
              onClick={onCancel}
              className="flex-1 bg-slate-600 text-white py-2 px-4 rounded-lg hover:bg-slate-700 transition-colors font-medium"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}