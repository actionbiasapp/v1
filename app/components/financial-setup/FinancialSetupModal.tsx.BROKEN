// app/components/FinancialSetupModal.tsx - FIXED VERSION
'use client';

import { useState, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { calculateSRSOptimization } from '@/app/lib/singaporeTax';

interface FinancialData {
  income: number;
  expenses: number;
  srsContributions: number;
  taxStatus: 'Employment Pass' | 'Citizen' | 'PR';
  fiTarget: number;
  fiYear: number;
  leanFITargetAmount: number;  // FIXED: Renamed from leanFITarget (number)
  firstMillionTarget: boolean;
  leanFITarget: boolean;       // FIXED: Keep boolean version
  fullFITarget: boolean;
}

interface YearData {
  year: number;
  income: number;
  expenses: number;
  savings: number;
  rate: number;
}

// PRIORITY 2: Number formatting utility
const formatNumberWithCommas = (value: number | string): string => {
  if (!value && value !== 0) return '';
  const numStr = value.toString().replace(/,/g, '');
  const num = parseFloat(numStr);
  if (isNaN(num)) return '';
  return num.toLocaleString('en-US');
};

// Smart defaults for Singapore Employment Pass holders
const SMART_DEFAULTS: FinancialData = {
  income: 120000,
  expenses: 72000,
  srsContributions: 0,
  taxStatus: 'Employment Pass',
  fiTarget: 2500000,
  fiYear: 2032,
  leanFITargetAmount: 1850000, // FIXED: Use renamed field
  firstMillionTarget: true,
  leanFITarget: true,
  fullFITarget: true
};

export default function FinancialSetupModal({ 
  isOpen, 
  onClose, 
  onProfileUpdate, 
  initialProfile 
}: {
  isOpen: boolean;
  onClose: () => void;
  onProfileUpdate?: (profile: any) => void;
  initialProfile?: any;
}) {
  const [data, setData] = useState<FinancialData>(SMART_DEFAULTS);
  const [yearlyData, setYearlyData] = useState<YearData[]>([]);
  const [activeTab, setActiveTab] = useState(0);
  const [loading, setLoading] = useState(false);
  
  // PRIORITY 6: Save button state management
  const [hasChanges, setHasChanges] = useState(false);
  const [initialData, setInitialData] = useState<FinancialData>(SMART_DEFAULTS);
  const [initialYearlyData, setInitialYearlyData] = useState<YearData[]>([]);
  
  // Modal states
  const [showAddYear, setShowAddYear] = useState(false);
  const [showEditGoals, setShowEditGoals] = useState(false);
  const [showYearManager, setShowYearManager] = useState(false);
  const [showEditCurrent, setShowEditCurrent] = useState(false);

  const currentYear = new Date().getFullYear();
  const currentYearData = yearlyData.find(y => y.year === currentYear);

  useEffect(() => {
    if (isOpen) loadData();
  }, [isOpen]);

  // PRIORITY 6: Track changes for save button state
  useEffect(() => {
    const dataChanged = JSON.stringify(data) !== JSON.stringify(initialData);
    const yearlyChanged = JSON.stringify(yearlyData) !== JSON.stringify(initialYearlyData);
    setHasChanges(dataChanged || yearlyChanged);
  }, [data, yearlyData, initialData, initialYearlyData]);

  // FIXED loadData function - don't override loaded data with defaults
  const loadData = async () => {
    try {
      const response = await fetch('/api/financial-profile');
      const result = await response.json();
      if (result.success) {
        // FIX: Use loaded data directly, only fill missing fields with defaults
        const loadedData = {
          income: result.data.income,
          expenses: result.data.expenses,
          srsContributions: result.data.srsContributions,
          taxStatus: result.data.taxStatus,
          fiTarget: result.data.fiTarget,
          fiYear: result.data.fiYear,
          leanFITargetAmount: result.data.leanFITargetAmount || SMART_DEFAULTS.leanFITargetAmount,
          firstMillionTarget: result.data.firstMillionTarget !== undefined ? result.data.firstMillionTarget : SMART_DEFAULTS.firstMillionTarget,
          leanFITarget: result.data.leanFITarget !== undefined ? result.data.leanFITarget : SMART_DEFAULTS.leanFITarget,
          fullFITarget: result.data.fullFITarget !== undefined ? result.data.fullFITarget : SMART_DEFAULTS.fullFITarget
        };
        
        setData(loadedData);
        setInitialData(loadedData);
        
        const loadedYearly = result.yearlyData || [];
        setYearlyData(loadedYearly);
        setInitialYearlyData(loadedYearly);
      }
    } catch (error) {
      console.error('Load failed:', error);
    }
  };const saveData = async () => {


  // PRIORITY 1: Enhanced data persistence with error handling
  const saveData = async () => {
    setLoading(true);
    try {
      console.log('Saving data:', { data, yearlyData }); // Debug logging

      const response = await fetch('/api/financial-profile', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ data, yearlyData })
      });
      
      const result = await response.json();
      console.log('Save response:', result); // Debug logging
      
      if (response.ok && result.success) {
        setInitialData(data); // Update baseline for change tracking
        setInitialYearlyData(yearlyData);
        setHasChanges(false);
        onProfileUpdate?.(data);
        onClose();
      } else {
        console.error('Save failed:', result.error);
        alert(`Save failed: ${result.error || 'Unknown error'}\nDetails: ${result.details || 'Check console for more info'}`);

      }
    } catch (error) {
      console.error('Save error:', error);
      alert('Save failed: Network error. Check your connection and try again.');
    }
    setLoading(false);
  };

  // Calculations
  const currentIncome = currentYearData?.income || data.income;
  const currentExpenses = currentYearData?.expenses || data.expenses;
  const savings = currentIncome - currentExpenses;
  const savingsRate = currentIncome > 0 ? (savings / currentIncome) * 100 : 0;
  
  const srsMax = data.taxStatus === 'Employment Pass' ? 35700 : 15000;
  const srsRemaining = srsMax - data.srsContributions;
  const taxIntel = currentIncome > 0 ? calculateSRSOptimization(currentIncome, data.srsContributions, data.taxStatus) : null;
  
  // PRIORITY 3: Safe progress calculations with division by zero protection
  const currentNetWorth = 489000;
  const firstMillionProgress = data.firstMillionTarget ? (currentNetWorth / 1000000) * 100 : 0;
  
  // FIXED: Safe lean FI calculation
  const leanFIProgress = (data.leanFITarget && data.leanFITargetAmount && data.leanFITargetAmount > 0) ? 
    (currentNetWorth / data.leanFITargetAmount) * 100 : 0;
  
  const fullFIProgress = (data.fullFITarget && data.fiTarget > 0) ? 
    (currentNetWorth / data.fiTarget) * 100 : 0;

  // PRIORITY 7: Fixed tax savings calculation - use existing taxSavings
  const currentTaxSavings = (data.srsContributions > 0 && taxIntel) ? 
    (data.srsContributions / taxIntel.recommendedContribution) * taxIntel.taxSavings : 0;
  const potentialTaxSavings = taxIntel ? taxIntel.taxSavings : 0;
  const totalPossibleSavings = currentTaxSavings + potentialTaxSavings;


  if (!isOpen) return null;

  const tabs = ['💰 Financial', '🎯 FI Goals', '🇸🇬 Tax & SRS'];

  return createPortal(
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-slate-800 rounded-2xl border border-slate-700 w-full max-w-2xl max-h-[85vh] flex flex-col">
        
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-slate-700">
          <h2 className="text-lg font-semibold text-white">Financial Setup</h2>
          <button onClick={onClose} className="text-slate-400 hover:text-white p-1 rounded hover:bg-slate-700">✕</button>
        </div>

        {/* Tab Navigation */}
        <div className="flex border-b border-slate-700">
          {tabs.map((tab, index) => (
            <button
              key={index}
              onClick={() => setActiveTab(index)}
              className={`flex-1 p-3 text-sm font-medium transition-colors ${
                activeTab === index 
                  ? 'text-white bg-slate-700/50 border-b-2 border-blue-500' 
                  : 'text-slate-400 hover:text-white'
              }`}
            >
              {tab}
            </button>
          ))}
        </div>

        {/* Tab Content */}
        <div className="flex-1 overflow-y-auto p-4">
          {activeTab === 0 && (
            <div className="space-y-4">
              <h3 className="font-medium text-white">Financial Overview</h3>
              
              {/* Current Year Summary or Add Form */}
              {currentYearData ? (
                <div className="bg-slate-700/30 rounded-lg p-4">
                  <div className="flex justify-between items-center mb-3">
                    <h4 className="text-sm font-medium text-white">{currentYear} Finances</h4>
                    <button 
                      onClick={() => setShowEditCurrent(true)}
                      className="text-xs bg-blue-600 text-white px-2 py-1 rounded hover:bg-blue-700"
                    >
                      Edit
                    </button>
                  </div>
                  <div className="grid grid-cols-3 gap-3 text-center text-sm">
                    <div>
                      <div className="text-blue-400 font-bold">S${formatNumberWithCommas(currentYearData.income)}</div>
                      <div className="text-xs text-slate-400">Income</div>
                    </div>
                    <div>
                      <div className="text-red-400 font-bold">S${formatNumberWithCommas(currentYearData.expenses)}</div>
                      <div className="text-xs text-slate-400">Expenses</div>
                    </div>
                    <div>
                      <div className="text-emerald-400 font-bold">{currentYearData.rate.toFixed(1)}%</div>
                      <div className="text-xs text-slate-400">Savings Rate</div>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="bg-yellow-900/20 border border-yellow-600/30 rounded-lg p-4">
                  <div className="text-yellow-300 text-sm font-medium mb-2">Add {currentYear} Financial Data</div>
                  <div className="text-yellow-200 text-xs mb-3">
                    Complete your current year finances to see insights and projections.
                  </div>
                  <button 
                    onClick={() => setShowEditCurrent(true)}
                    className="bg-yellow-600 text-white px-3 py-1 rounded text-sm hover:bg-yellow-700"
                  >
                    Add {currentYear} Data
                  </button>
                </div>
              )}

              {/* PRIORITY 4: Fixed Historical Data Table Layout */}
              <div>
                <div className="flex justify-between items-center mb-3">
                  <h4 className="text-sm font-medium text-white">Historical Data</h4>
                  <div className="flex gap-2">
                    <button 
                      onClick={() => setShowAddYear(true)}
                      className="text-xs bg-blue-600 text-white px-2 py-1 rounded hover:bg-blue-700"
                    >
                      Add Year
                    </button>
                    <button 
                      onClick={() => setShowYearManager(true)}
                      className="text-xs bg-slate-600 text-white px-2 py-1 rounded hover:bg-slate-700"
                    >
                      Manage Data
                    </button>
                  </div>
                </div>
                
                {yearlyData.filter(y => y.year !== currentYear).length > 0 ? (
                  <div className="bg-slate-700/30 rounded-lg p-3">
                    <table className="w-full text-xs">
                      <thead>
                        <tr className="border-b border-slate-600/50 mb-2">
                          <th className="text-left text-slate-400 pb-1">Year</th>
                          <th className="text-right text-slate-400 pb-1">Income</th>
                          <th className="text-right text-slate-400 pb-1">Expenses</th>
                          <th className="text-right text-slate-400 pb-1">Rate</th>
                        </tr>
                      </thead>
                      <tbody>
                        {yearlyData.filter(y => y.year !== currentYear).slice(0, 3).map((year) => (
                          <tr key={year.year}>
                            <td className="text-white py-1">{year.year}</td>
                            <td className="text-right text-blue-400 py-1">S${formatNumberWithCommas(year.income)}</td>
                            <td className="text-right text-red-400 py-1">S${formatNumberWithCommas(year.expenses)}</td>
                            <td className="text-right text-emerald-400 py-1">{year.rate.toFixed(1)}%</td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                    {yearlyData.filter(y => y.year !== currentYear).length > 3 && (
                      <div className="text-center text-blue-400 text-xs pt-2">
                        +{yearlyData.filter(y => y.year !== currentYear).length - 3} more years
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="text-slate-400 text-sm text-center py-4">
                    No historical data yet. Add previous years to see trends.
                  </div>
                )}
              </div>
            </div>
          )}

          {activeTab === 1 && (
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <h3 className="font-medium text-white">FI Goals</h3>
                <button 
                  onClick={() => setShowEditGoals(true)}
                  className="text-xs bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700"
                >
                  Edit FI Goals
                </button>
              </div>

              {/* PRIORITY 5: Optimized Progress Bar Display */}
              {(data.firstMillionTarget || data.leanFITarget || data.fullFITarget) && (
                <div className="mb-4 text-center">
                  <div className="text-lg font-bold text-white">Current: S${formatNumberWithCommas(currentNetWorth)}</div>
                  <div className="text-xs text-slate-400">Portfolio Value</div>
                </div>
              )}

              <div className="space-y-4">
                {data.firstMillionTarget && (
                  <div>
                    <div className="flex justify-between text-sm mb-1">
                      <span className="text-slate-300">🎯 First Million</span>
                      <span className="text-white">({firstMillionProgress.toFixed(1)}%)</span>
                    </div>
                    <div className="w-full bg-slate-600 rounded-full h-3">
                      <div 
                        className="h-3 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full transition-all duration-700"
                        style={{ width: `${Math.min(firstMillionProgress, 100)}%` }}
                      />
                    </div>
                  </div>
                )}

                {data.leanFITarget && data.leanFITargetAmount > 0 && (
                  <div>
                    <div className="flex justify-between text-sm mb-1">
                      <span className="text-slate-300">🌴 Lean FI - S${formatNumberWithCommas(data.leanFITargetAmount)}</span>
                      <span className="text-white">({leanFIProgress.toFixed(1)}%)</span>
                    </div>
                    <div className="w-full bg-slate-600 rounded-full h-3">
                      <div 
                        className="h-3 bg-gradient-to-r from-yellow-500 to-orange-500 rounded-full transition-all duration-700"
                        style={{ width: `${Math.min(leanFIProgress, 100)}%` }}
                      />
                    </div>
                  </div>
                )}

                {data.fullFITarget && (
                  <div>
                    <div className="flex justify-between text-sm mb-1">
                      <span className="text-slate-300">🏆 Full FI - S${formatNumberWithCommas(data.fiTarget)}</span>
                      <span className="text-white">({fullFIProgress.toFixed(1)}%)</span>
                    </div>
                    <div className="w-full bg-slate-600 rounded-full h-3">
                      <div 
                        className="h-3 bg-gradient-to-r from-emerald-500 to-green-500 rounded-full transition-all duration-700"
                        style={{ width: `${Math.min(fullFIProgress, 100)}%` }}
                      />
                    </div>
                  </div>
                )}

                {!data.firstMillionTarget && !data.leanFITarget && !data.fullFITarget && (
                  <div className="text-slate-400 text-sm text-center py-8">
                    No FI goals selected. Click "Edit FI Goals" to add your targets.
                  </div>
                )}
              </div>

              {/* Timeline Info */}
              {data.fullFITarget && (
                <div className="bg-slate-700/30 rounded-lg p-4">
                  <div className="grid grid-cols-2 gap-4 text-center">
                    <div>
                      <div className="text-lg font-bold text-blue-400">
                        {data.fiYear - new Date().getFullYear()}
                      </div>
                      <div className="text-xs text-slate-400">Years to Target</div>
                    </div>
                    <div>
                      <div className="text-lg font-bold text-emerald-400">{data.fiYear}</div>
                      <div className="text-xs text-slate-400">Target Year</div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}

          {activeTab === 2 && (
            <div className="space-y-4">
              <h3 className="font-medium text-white">Tax & SRS Optimization</h3>
              
              <div className="grid grid-cols-2 gap-3">
                <div>
                  <label className="block text-xs text-slate-400 mb-1">Tax Status</label>
                  <select
                    value={data.taxStatus}
                    onChange={(e) => setData({...data, taxStatus: e.target.value as any})}
                    className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="Employment Pass">Employment Pass</option>
                    <option value="Citizen">Citizen</option>
                    <option value="PR">PR</option>
                  </select>
                </div>
                <div>
                  <label className="block text-xs text-slate-400 mb-1">SRS Contributions (2025)</label>
                  <input
                    type="number"
                    value={data.srsContributions || ''}
                    onChange={(e) => setData({...data, srsContributions: Number(e.target.value)})}
                    placeholder="0"
                    className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>

              {/* SRS Progress */}
              <div className="bg-slate-700/30 rounded-lg p-3">
                <div className="grid grid-cols-3 gap-3 text-center text-xs">
                  <div>
                    <div className="text-emerald-400 font-bold">S${formatNumberWithCommas(data.srsContributions)}</div>
                    <div className="text-slate-400">Contributed</div>
                  </div>
                  <div>
                    <div className="text-blue-400 font-bold">S${formatNumberWithCommas(srsRemaining)}</div>
                    <div className="text-slate-400">Remaining</div>
                  </div>
                  <div>
                    <div className="text-yellow-400 font-bold">S${formatNumberWithCommas(Math.round(currentTaxSavings))}</div>
                    <div className="text-slate-400">Tax Saved</div>
                  </div>
                </div>
                
                <div className="w-full bg-slate-600 rounded-full h-2 mt-2">
                  <div 
                    className="h-2 bg-gradient-to-r from-blue-500 to-emerald-500 rounded-full"
                    style={{ width: `${(data.srsContributions / srsMax) * 100}%` }}
                  />
                </div>
              </div>

              {/* Tax Optimization */}
              {taxIntel && (
                <div className="bg-emerald-900/20 border border-emerald-600/30 rounded-lg p-3">
                  <div className="text-emerald-300 text-sm font-medium mb-2">💡 Tax Optimization</div>
                  
                  {currentTaxSavings > 0 && (
                    <div className="text-emerald-200 text-xs mb-2">
                      ✅ Current S${formatNumberWithCommas(data.srsContributions)} saves S${formatNumberWithCommas(Math.round(currentTaxSavings))} in taxes
                    </div>
                  )}
                  
                  {srsRemaining > 0 && (
                    <div className="text-emerald-200 text-xs">
                      🎯 Contributing remaining S${formatNumberWithCommas(srsRemaining)} would save additional 
                      S${formatNumberWithCommas(Math.round(potentialTaxSavings))} (Total: S${formatNumberWithCommas(Math.round(totalPossibleSavings))})
                    </div>
                  )}
                </div>
              )}

              {data.taxStatus === 'Employment Pass' && (
                <div className="bg-blue-900/20 border border-blue-600/30 rounded-lg p-3">
                  <div className="text-blue-300 text-sm font-medium mb-1">🇸🇬 Employment Pass Advantage</div>
                  <div className="text-blue-200 text-xs">
                    S$35,700 limit vs S$15,000 for Citizens/PRs (+S$20,700 advantage)
                  </div>
                </div>
              )}
            </div>
          )}
        </div>

        {/* PRIORITY 6: Enhanced Footer with Save Button State */}
        <div className="border-t border-slate-700 p-4 flex justify-between items-center">
          <div className="text-xs text-slate-400">
            {loading ? 'Saving...' : hasChanges ? 'Unsaved changes' : 'All changes saved'}
          </div>
          <div className="flex gap-2">
            <button onClick={onClose} className="px-3 py-1 text-slate-400 hover:text-white text-sm">
              Cancel
            </button>
            <button 
              onClick={saveData} 
              disabled={loading || !hasChanges}
              className={`px-4 py-1 rounded text-sm ${
                hasChanges && !loading 
                  ? 'bg-indigo-600 text-white hover:bg-indigo-700' 
                  : 'bg-slate-600 text-slate-400 cursor-not-allowed'
              }`}
            >
              {loading ? 'Saving...' : 'Save'}
            </button>
          </div>
        </div>

        {/* Modals */}
        {showAddYear && (
          <AddYearModal
            onAdd={(year, income, expenses) => {
              const savings = income - expenses;
              const rate = income > 0 ? (savings / income) * 100 : 0;
              setYearlyData([...yearlyData, { year, income, expenses, savings, rate }].sort((a, b) => b.year - a.year));
              setShowAddYear(false);
            }}
            onClose={() => setShowAddYear(false)}
          />
        )}

        {showEditCurrent && (
          <EditCurrentYearModal
            year={currentYear}
            initialData={currentYearData}
            onSave={(income, expenses) => {
              const savings = income - expenses;
              const rate = income > 0 ? (savings / income) * 100 : 0;
              const newData = { year: currentYear, income, expenses, savings, rate };
              setYearlyData([...yearlyData.filter(y => y.year !== currentYear), newData]);
              setShowEditCurrent(false);
            }}
            onClose={() => setShowEditCurrent(false)}
          />
        )}

        {showEditGoals && (
          <EditGoalsModal
            data={data}
            onSave={(newData) => {
              setData(newData);
              setShowEditGoals(false);
            }}
            onClose={() => setShowEditGoals(false)}
          />
        )}

        {showYearManager && (
          <YearManagerModal
            yearlyData={yearlyData}
            onEdit={(year, income, expenses) => {
              const savings = income - expenses;
              const rate = income > 0 ? (savings / income) * 100 : 0;
              setYearlyData(yearlyData.map(d => 
                d.year === year ? { year, income, expenses, savings, rate } : d
              ));
            }}
            onDelete={(year) => {
              setYearlyData(yearlyData.filter(d => d.year !== year));
            }}
            onClose={() => setShowYearManager(false)}
          />
        )}
      </div>
    </div>,
    document.body
  );


// PRIORITY 2: Fixed Modal Components with Number Formatting
function AddYearModal({ onAdd, onClose }: {
  onAdd: (year: number, income: number, expenses: number) => void;
  onClose: () => void;
}) {
  const [year, setYear] = useState(new Date().getFullYear() - 1);
  const [income, setIncome] = useState('');
  const [expenses, setExpenses] = useState('');

  return (
    <div className="absolute inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4">
      <div className="bg-slate-800 rounded-xl p-6 w-full max-w-md border border-slate-700">
        <h3 className="text-lg font-bold text-white mb-4">Add Year Data</h3>
        
        <div className="space-y-3">
          <div>
            <label className="block text-sm text-slate-400 mb-1">Year</label>
            <input
              type="number"
              value={year}
              onChange={(e) => setYear(Number(e.target.value))}
              className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white text-sm"
            />
          </div>
          <div>
            <label className="block text-sm text-slate-400 mb-1">Income (S$)</label>
            <input
              type="number"
              value={income}
              onChange={(e) => setIncome(e.target.value)}
              placeholder="120,000"
              className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white text-sm"
            />
          </div>
          <div>
            <label className="block text-sm text-slate-400 mb-1">Expenses (S$)</label>
            <input
              type="number"
              value={expenses}
              onChange={(e) => setExpenses(e.target.value)}
              placeholder="72,000"
              className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white text-sm"
            />
          </div>
        </div>
        
        <div className="flex gap-2 mt-4">
          <button onClick={onClose} className="flex-1 px-3 py-2 bg-slate-600 text-white rounded text-sm hover:bg-slate-700">
            Cancel
          </button>
          <button 
            onClick={() => onAdd(year, Number(income), Number(expenses))}
            disabled={!income || !expenses}
            className="flex-1 px-3 py-2 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 disabled:opacity-50"
          >
            Add Year
          </button>
        </div>
      </div>
    </div>
  );
}

function EditCurrentYearModal({ year, initialData, onSave, onClose }: {
  year: number;
  initialData?: YearData;
  onSave: (income: number, expenses: number) => void;
  onClose: () => void;
}) {
  const [income, setIncome] = useState(initialData?.income?.toString() || '120000');
  const [expenses, setExpenses] = useState(initialData?.expenses?.toString() || '72000');

  const formatNumberWithCommas = (value: number | string): string => {
    if (!value && value !== 0) return '';
    const numStr = value.toString().replace(/,/g, '');
    const num = parseFloat(numStr);
    if (isNaN(num)) return '';
    return num.toLocaleString('en-US');
  };

  return (
    <div className="absolute inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4">
      <div className="bg-slate-800 rounded-xl p-6 w-full max-w-md border border-slate-700">
        <h3 className="text-lg font-bold text-white mb-4">{year} Financial Data</h3>
        
        <div className="space-y-3">
          <div>
            <label className="block text-sm text-slate-400 mb-1">Annual Income (S$)</label>
            <input
              type="number"
              value={income}
              onChange={(e) => setIncome(e.target.value)}
              placeholder="120,000"
              className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white text-sm"
            />
          </div>
          <div>
            <label className="block text-sm text-slate-400 mb-1">Annual Expenses (S$)</label>
            <input
              type="number"
              value={expenses}
              onChange={(e) => setExpenses(e.target.value)}
              placeholder="72,000"
              className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white text-sm"
            />
          </div>
          
          {income && expenses && (
            <div className="bg-slate-700/30 rounded p-2 text-xs">
              <div className="flex justify-between">
                <span className="text-slate-400">Savings:</span>
                <span className="text-emerald-400">S${formatNumberWithCommas(Number(income) - Number(expenses))}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-slate-400">Rate:</span>
                <span className="text-emerald-400">{((Number(income) - Number(expenses)) / Number(income) * 100).toFixed(1)}%</span>
              </div>
            </div>
          )}
        </div>
        
        <div className="flex gap-2 mt-4">
          <button onClick={onClose} className="flex-1 px-3 py-2 bg-slate-600 text-white rounded text-sm hover:bg-slate-700">
            Cancel
          </button>
          <button 
            onClick={() => onSave(Number(income), Number(expenses))}
            className="flex-1 px-3 py-2 bg-blue-600 text-white rounded text-sm hover:bg-blue-700"
          >
            Save
          </button>
        </div>
      </div>
    </div>
  );
}

function EditGoalsModal({ data, onSave, onClose }: {
  data: FinancialData;
  onSave: (data: FinancialData) => void;
  onClose: () => void;
}) {
  const [goals, setGoals] = useState(data);

  return (
    <div className="absolute inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4">
      <div className="bg-slate-800 rounded-xl p-6 w-full max-w-md border border-slate-700">
        <h3 className="text-lg font-bold text-white mb-4">Edit FI Goals</h3>
        
        <div className="space-y-4">
          <label className="flex items-center gap-2">
            <input
              type="checkbox"
              checked={goals.firstMillionTarget}
              onChange={(e) => setGoals({...goals, firstMillionTarget: e.target.checked})}
              className="w-4 h-4 text-blue-600 bg-slate-600 border-slate-500 rounded"
            />
            <span className="text-white text-sm">First Million (S$1,000,000)</span>
          </label>

          <div>
            <label className="flex items-center gap-2 mb-2">
              <input
                type="checkbox"
                checked={goals.leanFITarget}
                onChange={(e) => setGoals({...goals, leanFITarget: e.target.checked})}
                className="w-4 h-4 text-blue-600 bg-slate-600 border-slate-500 rounded"
              />
              <span className="text-white text-sm">Lean FI Target</span>
            </label>
            {goals.leanFITarget && (
              <input
                type="number"
                value={goals.leanFITargetAmount || ''}
                onChange={(e) => setGoals({...goals, leanFITargetAmount: Number(e.target.value)})}
                placeholder="1,850,000"
                className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white text-sm"
              />
            )}
          </div>

          <div>
            <label className="flex items-center gap-2 mb-2">
              <input
                type="checkbox"
                checked={goals.fullFITarget}
                onChange={(e) => setGoals({...goals, fullFITarget: e.target.checked})}
                className="w-4 h-4 text-blue-600 bg-slate-600 border-slate-500 rounded"
              />
              <span className="text-white text-sm">Full FI Target</span>
            </label>
            {goals.fullFITarget && (
              <div className="space-y-2">
                <input
                  type="number"
                  value={goals.fiTarget || ''}
                  onChange={(e) => setGoals({...goals, fiTarget: Number(e.target.value)})}
                  placeholder="2,500,000"
                  className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white text-sm"
                />
                <input
                  type="number"
                  value={goals.fiYear || ''}
                  onChange={(e) => setGoals({...goals, fiYear: Number(e.target.value)})}
                  placeholder="2032"
                  className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white text-sm"
                />
              </div>
            )}
          </div>
        </div>
        
        <div className="flex gap-2 mt-4">
          <button onClick={onClose} className="flex-1 px-3 py-2 bg-slate-600 text-white rounded text-sm hover:bg-slate-700">
            Cancel
          </button>
          <button 
            onClick={() => onSave(goals)}
            className="flex-1 px-3 py-2 bg-blue-600 text-white rounded text-sm hover:bg-blue-700"
          >
            Save Goals
          </button>
        </div>
      </div>
    </div>
  );
}

function YearManagerModal({ yearlyData, onEdit, onDelete, onClose }: {
  yearlyData: YearData[];
  onEdit: (year: number, income: number, expenses: number) => void;
  onDelete: (year: number) => void;
  onClose: () => void;
}) {
  const [editingYear, setEditingYear] = useState<number | null>(null);
  const [editData, setEditData] = useState({ income: '', expenses: '' });

  const formatNumberWithCommas = (value: number | string): string => {
    if (!value && value !== 0) return '';
    const numStr = value.toString().replace(/,/g, '');
    const num = parseFloat(numStr);
    if (isNaN(num)) return '';
    return num.toLocaleString('en-US');
  };

  const startEdit = (data: YearData) => {
    setEditingYear(data.year);
    setEditData({ income: data.income.toString(), expenses: data.expenses.toString() });
  };

  const saveEdit = () => {
    if (editingYear) {
      onEdit(editingYear, Number(editData.income), Number(editData.expenses));
      setEditingYear(null);
    }
  };

  return (
    <div className="absolute inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4">
      <div className="bg-slate-800 rounded-xl w-full max-w-4xl border border-slate-700 max-h-[70vh] flex flex-col">
        <div className="flex justify-between items-center p-4 border-b border-slate-700">
          <h3 className="text-lg font-bold text-white">Manage Historical Data</h3>
          <button onClick={onClose} className="text-slate-400 hover:text-white">✕</button>
        </div>
        
        <div className="flex-1 overflow-y-auto p-4">
          <table className="w-full text-sm">
            <thead>
              <tr className="border-b border-slate-700">
                <th className="text-left py-2 text-slate-300">Year</th>
                <th className="text-right py-2 text-slate-300">Income</th>
                <th className="text-right py-2 text-slate-300">Expenses</th>
                <th className="text-right py-2 text-slate-300">Savings</th>
                <th className="text-right py-2 text-slate-300">Rate</th>
                <th className="text-center py-2 text-slate-300">Actions</th>
              </tr>
            </thead>
            <tbody>
              {yearlyData.map((data) => (
                <tr key={data.year} className="border-b border-slate-700/50">
                  <td className="py-2 text-white">{data.year}</td>
                  <td className="py-2 text-right">
                    {editingYear === data.year ? (
                      <input
                        type="number"
                        value={editData.income}
                        onChange={(e) => setEditData({...editData, income: e.target.value})}
                        className="w-20 px-1 py-1 bg-slate-700 border border-slate-600 rounded text-white text-xs"
                      />
                    ) : (
                      <span className="text-blue-400">S${formatNumberWithCommas(data.income)}</span>
                    )}
                  </td>
                  <td className="py-2 text-right">
                    {editingYear === data.year ? (
                      <input
                        type="number"
                        value={editData.expenses}
                        onChange={(e) => setEditData({...editData, expenses: e.target.value})}
                        className="w-20 px-1 py-1 bg-slate-700 border border-slate-600 rounded text-white text-xs"
                      />
                    ) : (
                      <span className="text-red-400">S${formatNumberWithCommas(data.expenses)}</span>
                    )}
                  </td>
                  <td className="py-2 text-right text-emerald-400">S${formatNumberWithCommas(data.savings)}</td>
                  <td className="py-2 text-right text-emerald-400">{data.rate.toFixed(1)}%</td>
                  <td className="py-2 text-center">
                    {editingYear === data.year ? (
                      <div className="flex gap-1 justify-center">
                        <button
                          onClick={saveEdit}
                          className="text-emerald-400 hover:text-emerald-300 text-xs px-1"
                        >
                          Save
                        </button>
                        <button
                          onClick={() => setEditingYear(null)}
                          className="text-slate-400 hover:text-slate-300 text-xs px-1"
                        >
                          Cancel
                        </button>
                      </div>
                    ) : (
                      <div className="flex gap-1 justify-center">
                        <button
                          onClick={() => startEdit(data)}
                          className="text-blue-400 hover:text-blue-300 text-xs px-1"
                        >
                          Edit
                        </button>
                        <button
                          onClick={() => onDelete(data.year)}
                          className="text-red-400 hover:text-red-300 text-xs px-1"
                        >
                          Delete
                        </button>
                      </div>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        
        <div className="p-4 border-t border-slate-700">
          <button
            onClick={onClose}
            className="bg-slate-600 text-white px-4 py-2 rounded text-sm hover:bg-slate-700"
          >
            Done
          </button>
        </div>
      </div>
    </div>
  );
}
}