// app/lib/financialDataUtils.ts
// Enhanced completion calculation and data utilities for V5.3D

import type { 
  ComprehensiveFinancialProfile,
  IncomeRecord,
  ExpenseRecord,
  SavingsRecord,
  NetWorthRecord 
} from './types/financial';

// ENHANCED PROFILE COMPLETENESS CALCULATION
// Supports both current V5.3C basic data and future V5.3D comprehensive data

export interface CompletionScoreBreakdown {
  totalScore: number;           // 0-100 overall completion
  breakdown: {
    basicInfo: number;          // /20 - Core profile data
    currentYearFinancials: number; // /30 - Current year income/expenses  
    historicalData: number;     // /25 - Multi-year data richness
    strategicPlanning: number;  // /15 - SRS, FI, portfolio strategy
    dataQuality: number;        // /10 - Data accuracy and consistency
  };
  recommendations: string[];    // Specific improvement suggestions
  nextSteps: string[];         // Prioritized actions to increase completion
}

export class FinancialCompletionCalculator {
  
  static calculateComprehensiveCompletion(
    profile: Partial<ComprehensiveFinancialProfile>
  ): CompletionScoreBreakdown {
    
    const breakdown = {
      basicInfo: this.calculateBasicInfoScore(profile),
      currentYearFinancials: this.calculateCurrentYearScore(profile),
      historicalData: this.calculateHistoricalDataScore(profile),
      strategicPlanning: this.calculateStrategicPlanningScore(profile),
      dataQuality: this.calculateDataQualityScore(profile)
    };
    
    const totalScore = Object.values(breakdown).reduce((sum, score) => sum + score, 0);
    
    const recommendations = this.generateRecommendations(breakdown, profile);
    const nextSteps = this.generateNextSteps(breakdown, profile);
    
    return {
      totalScore: Math.min(totalScore, 100),
      breakdown,
      recommendations,
      nextSteps
    };
  }
  
  // BASIC INFORMATION SCORING (20 points max)
  private static calculateBasicInfoScore(profile: Partial<ComprehensiveFinancialProfile>): number {
    let score = 0;
    
    // Essential profile fields (15 points)
    if (profile.basicInfo?.taxStatus) score += 5;
    if (profile.basicInfo?.primaryCurrency) score += 3;
    if (profile.basicInfo?.country) score += 2;
    if (profile.basicInfo?.birthYear) score += 5; // Important for age-based calculations
    
    // Profile metadata (5 points) 
    if (profile.profileMetadata?.lastUpdated) score += 2;
    if (profile.profileMetadata?.dataPrivacy) score += 3;
    
    return Math.min(score, 20);
  }
  
  // CURRENT YEAR FINANCIAL DATA SCORING (30 points max)
  private static calculateCurrentYearScore(profile: Partial<ComprehensiveFinancialProfile>): number {
    let score = 0;
    const currentYear = new Date().getFullYear();
    
    // Current year income (15 points)
    const currentIncome = profile.incomeHistory?.find(r => r.year === currentYear);
    if (currentIncome) {
      if (currentIncome.employmentIncome > 0) score += 10;
      if (currentIncome.totalIncome > currentIncome.employmentIncome) score += 3; // Multiple income sources
      if (currentIncome.taxesPaid > 0) score += 2; // Tax information
    }
    
    // Current year expenses (10 points)
    const currentExpenses = profile.expenseHistory?.find(r => r.year === currentYear);
    if (currentExpenses) {
      if (currentExpenses.totalExpenses > 0) score += 7;
      if (currentExpenses.savingsRate > 0) score += 3; // Calculated savings rate
    }
    
    // Current year net worth (5 points)
    const currentNetWorth = profile.netWorthHistory?.find(r => r.year === currentYear);
    if (currentNetWorth) {
      if (currentNetWorth.netWorth > 0) score += 3;
      if (currentNetWorth.portfolioValue > 0) score += 2;
    }
    
    return Math.min(score, 30);
  }
  
  // HISTORICAL DATA RICHNESS SCORING (25 points max)
  private static calculateHistoricalDataScore(profile: Partial<ComprehensiveFinancialProfile>): number {
    let score = 0;
    
    // Years of income data (10 points max)
    const incomeYears = profile.incomeHistory?.length || 0;
    score += Math.min(incomeYears * 2, 10);
    
    // Years of expense data (8 points max)  
    const expenseYears = profile.expenseHistory?.length || 0;
    score += Math.min(expenseYears * 2, 8);
    
    // Net worth tracking history (7 points max)
    const netWorthYears = profile.netWorthHistory?.length || 0;
    score += Math.min(netWorthYears * 1.5, 7);
    
    return Math.min(score, 25);
  }
  
  // STRATEGIC PLANNING SCORING (15 points max)
  private static calculateStrategicPlanningScore(profile: Partial<ComprehensiveFinancialProfile>): number {
    let score = 0;
    
    // SRS planning (6 points)
    if (profile.srsPlanning) {
      if (profile.srsPlanning.autoOptimize !== undefined) score += 2;
      if (profile.srsPlanning.monthlyTarget > 0) score += 2;
      if (profile.srsPlanning.contributionHistory.length > 0) score += 2;
    }
    
    // FI planning (6 points)
    if (profile.fiPlanning) {
      if (profile.fiPlanning.customFIAmount > 0) score += 2;
      if (profile.fiPlanning.customTargetYear > 0) score += 2;
      if (profile.fiPlanning.geographicPlans) score += 2;
    }
    
    // Portfolio strategy (3 points)
    if (profile.portfolioStrategy) {
      if (profile.portfolioStrategy.strategyName) score += 1;
      if (profile.portfolioStrategy.isActive) score += 1;
      if (profile.portfolioStrategy.riskLevel) score += 1;
    }
    
    return Math.min(score, 15);
  }
  
  // DATA QUALITY SCORING (10 points max)
  private static calculateDataQualityScore(profile: Partial<ComprehensiveFinancialProfile>): number {
    let score = 0;
    
    // Data consistency checks (5 points)
    const hasConsistentCurrency = this.checkCurrencyConsistency(profile);
    if (hasConsistentCurrency) score += 2;
    
    const hasReasonableValues = this.checkReasonableValues(profile);
    if (hasReasonableValues) score += 3;
    
    // Data recency (3 points)
    const lastUpdate = profile.profileMetadata?.lastUpdated;
    if (lastUpdate) {
      const daysSinceUpdate = (Date.now() - lastUpdate.getTime()) / (1000 * 60 * 60 * 24);
      if (daysSinceUpdate < 30) score += 3;
      else if (daysSinceUpdate < 90) score += 2;
      else if (daysSinceUpdate < 180) score += 1;
    }
    
    // Confidence levels (2 points)
    const highConfidenceRecords = [
      ...(profile.incomeHistory || []).filter(r => r.confidence === 'high'),
      ...(profile.expenseHistory || []).filter(r => r.confidence === 'high')
    ];
    if (highConfidenceRecords.length > 0) score += 2;
    
    return Math.min(score, 10);
  }
  
  // VALIDATION HELPERS
  private static checkCurrencyConsistency(profile: Partial<ComprehensiveFinancialProfile>): boolean {
    const primaryCurrency = profile.basicInfo?.primaryCurrency || 'SGD';
    
    const allRecords = [
      ...(profile.incomeHistory || []),
      ...(profile.expenseHistory || []),
      ...(profile.netWorthHistory || [])
    ];
    
    // Check if most records use the primary currency
    const primaryCurrencyCount = allRecords.filter(r => r.currency === primaryCurrency).length;
    return allRecords.length === 0 || (primaryCurrencyCount / allRecords.length) >= 0.8;
  }
  
  private static checkReasonableValues(profile: Partial<ComprehensiveFinancialProfile>): boolean {
    // Check for reasonable income/expense ratios
    const currentYear = new Date().getFullYear();
    const income = profile.incomeHistory?.find(r => r.year === currentYear);
    const expenses = profile.expenseHistory?.find(r => r.year === currentYear);
    
    if (income && expenses) {
      const savingsRate = expenses.savingsRate;
      // Savings rate should be between -50% and 90%
      return savingsRate >= -50 && savingsRate <= 90;
    }
    
    return true; // Default to true if no data to validate
  }
  
  // RECOMMENDATION GENERATION
  private static generateRecommendations(
    breakdown: CompletionScoreBreakdown['breakdown'],
    profile: Partial<ComprehensiveFinancialProfile>
  ): string[] {
    const recommendations: string[] = [];
    
    if (breakdown.basicInfo < 15) {
      recommendations.push("Complete basic profile information including birth year for accurate projections");
    }
    
    if (breakdown.currentYearFinancials < 20) {
      recommendations.push("Add current year income and expense data for better financial insights");
    }
    
    if (breakdown.historicalData < 10) {
      recommendations.push("Add historical financial data (3+ years) for trend analysis");
    }
    
    if (breakdown.strategicPlanning < 10) {
      recommendations.push("Set up SRS and FI planning strategies for comprehensive optimization");
    }
    
    if (breakdown.dataQuality < 7) {
      recommendations.push("Review and update data accuracy, ensure consistent currency usage");
    }
    
    return recommendations;
  }
  
  // NEXT STEPS GENERATION
  private static generateNextSteps(
    breakdown: CompletionScoreBreakdown['breakdown'],
    profile: Partial<ComprehensiveFinancialProfile>
  ): string[] {
    const nextSteps: string[] = [];
    
    // Prioritize by impact and ease
    if (breakdown.basicInfo < 15) {
      nextSteps.push("1. Add birth year and tax status in Basic Info tab");
    }
    
    if (breakdown.currentYearFinancials < 20) {
      nextSteps.push("2. Enter current year income in Income & Tax tab");
      nextSteps.push("3. Add current year expenses in Expenses & Savings tab");
    }
    
    if (breakdown.strategicPlanning < 10) {
      nextSteps.push("4. Set FI target amount and timeline in FI Planning tab");
      nextSteps.push("5. Configure SRS optimization in SRS Planning tab");
    }
    
    if (breakdown.historicalData < 10) {
      nextSteps.push("6. Add previous years' financial data for trend analysis");
    }
    
    return nextSteps.slice(0, 5); // Limit to top 5 next steps
  }
}

// BACKWARD COMPATIBILITY FOR V5.3C
// Support existing FinancialProfile interface until V5.3D migration complete

export function calculateBasicProfileCompleteness(profile: any): number {
  // Use the current V5.3C calculation for backward compatibility
  const currentModalFields = [
    { field: 'annualIncome', weight: 30, required: true },
    { field: 'taxStatus', weight: 10, required: true },
    { field: 'currentSRSContributions', weight: 25, required: true },
    { field: 'srsAutoOptimize', weight: 10, required: false },
    { field: 'customFIAmount', weight: 15, required: false },
    { field: 'customTargetYear', weight: 10, required: false }
  ];
  
  let completeness = 0;
  
  currentModalFields.forEach(({ field, weight, required }) => {
    const value = profile[field];
    const hasValue = value !== null && value !== undefined && value !== 0 && value !== '';
    
    if (hasValue) {
      completeness += weight;
    } else if (!required && value === false) {
      completeness += weight * 0.5;
    }
  });
  
  return Math.min(Math.round(completeness), 100);
}

// UTILITY FUNCTIONS FOR FINANCIAL CALCULATIONS

export class FinancialCalculations {
  
  static calculateSavingsRate(income: number, expenses: number): number {
    if (income <= 0) return 0;
    return Math.round(((income - expenses) / income) * 100 * 10) / 10; // Round to 1 decimal
  }
  
  static calculateNetWorth(
    assets: {
      portfolio: number;
      realEstate: number;
      cash: number;
      srs: number;
      cpf: number;
      other: number;
    },
    liabilities: {
      mortgage: number;
      loans: number;
      creditCard: number;
      other: number;
    }
  ): number {
    const totalAssets = Object.values(assets).reduce((sum, value) => sum + value, 0);
    const totalLiabilities = Object.values(liabilities).reduce((sum, value) => sum + value, 0);
    return totalAssets - totalLiabilities;
  }
  
  static calculateFIProgress(currentNetWorth: number, fiTarget: number): number {
    if (fiTarget <= 0) return 0;
    return Math.min((currentNetWorth / fiTarget) * 100, 100);
  }
  
  static calculateYearsToFI(
    currentNetWorth: number,
    annualSavings: number,
    fiTarget: number,
    expectedReturn: number = 0.07
  ): number {
    if (annualSavings <= 0 || currentNetWorth >= fiTarget) return 0;
    
    const remainingAmount = fiTarget - currentNetWorth;
    const futureValueOfCurrentAssets = currentNetWorth;
    
    // Simple compound growth calculation
    // More sophisticated modeling can be added later
    let years = 0;
    let currentValue = currentNetWorth;
    
    while (currentValue < fiTarget && years < 50) {
      currentValue = currentValue * (1 + expectedReturn) + annualSavings;
      years++;
    }
    
    return years;
  }
  
  static calculateMonthlyInvestmentNeeded(
    currentNetWorth: number,
    fiTarget: number,
    yearsToTarget: number,
    expectedReturn: number = 0.07
  ): number {
    if (yearsToTarget <= 0) return 0;
    
    const monthlyReturn = expectedReturn / 12;
    const totalMonths = yearsToTarget * 12;
    const futureValueCurrent = currentNetWorth * Math.pow(1 + monthlyReturn, totalMonths);
    const remainingNeeded = fiTarget - futureValueCurrent;
    
    if (remainingNeeded <= 0) return 0;
    
    // Calculate monthly payment needed using future value of annuity formula
    const monthlyPayment = remainingNeeded / (((Math.pow(1 + monthlyReturn, totalMonths) - 1) / monthlyReturn));
    
    return Math.max(0, monthlyPayment);
  }
}

// EXPORT MAIN FUNCTIONS
export {
  FinancialCompletionCalculator,
  FinancialCalculations,
  calculateBasicProfileCompleteness as calculateProfileCompleteness // Backward compatibility
};