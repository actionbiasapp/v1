// prisma/schema.prisma
// Enhanced schema for V5.3D - Comprehensive Financial Data Management

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENHANCED USER MODEL - Core user data
model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String
  
  // Basic financial profile
  country         String           @default("Singapore")
  taxStatus       String           @default("Employment Pass")
  primaryCurrency String           @default("SGD")
  birthYear       Int?
  srsLimit        Decimal          @default(35700)
  fiGoal          Decimal          @default(2500000)
  fiTargetYear    Int              @default(2032)
  
  // Profile metadata
  profileCompleteness Int          @default(0)
  dataQuality        Int          @default(0)
  yearsOfData        Int          @default(0)
  lastProfileUpdate  DateTime     @default(now())
  
  // Preferences
  autoUpdatePortfolio Boolean     @default(true)
  shareAnonymizedData Boolean     @default(false)
  shareWithAdvisor   Boolean      @default(false)
  exportDataAllowed  Boolean      @default(true)
  
  // Reminders
  srsDeadlineReminder Boolean     @default(true)
  rebalanceReminder   Boolean     @default(true)
  fiProgressReminder  Boolean     @default(true)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relations
  categories      AssetCategory[]
  holdings        Holdings[]
  recommendations Recommendation[]
  
  // V5.3D Financial Data Relations
  incomeRecords   IncomeRecord[]
  expenseRecords  ExpenseRecord[]
  savingsRecords  SavingsRecord[]
  netWorthRecords NetWorthRecord[]
  portfolioStrategies PortfolioStrategy[]
  srsPlans        SRSPlan[]
  fiPlans         FIPlan[]
  auditLogs       AuditLog[]
}

// MULTI-YEAR INCOME TRACKING
model IncomeRecord {
  id                String   @id @default(cuid())
  userId            String
  year              Int
  
  // Income sources
  employmentIncome  Decimal  @default(0)
  bonusIncome       Decimal  @default(0)
  investmentIncome  Decimal  @default(0)
  businessIncome    Decimal  @default(0)
  otherIncome       Decimal  @default(0)
  totalIncome       Decimal  @default(0)
  
  // Tax information
  taxesPaid         Decimal  @default(0)
  currency          String   @default("SGD")
  
  // Metadata
  notes             String?
  isEstimated       Boolean  @default(false)
  confidence        String   @default("medium") // low, medium, high
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, year])
  @@index([userId, year])
}

// COMPREHENSIVE EXPENSE TRACKING
model ExpenseRecord {
  id              String   @id @default(cuid())
  userId          String
  year            Int
  
  // Core expenses
  totalExpenses   Decimal  @default(0)
  currency        String   @default("SGD")
  
  // Calculated fields
  savingsRate     Decimal  @default(0)
  savingsAmount   Decimal  @default(0)
  
  // Optional detailed breakdown (for future expansion)
  housing         Decimal? 
  transportation  Decimal?
  food            Decimal?
  healthcare      Decimal?
  entertainment   Decimal?
  other           Decimal?
  
  // Metadata
  notes           String?
  isEstimated     Boolean  @default(false)
  confidence      String   @default("medium")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, year])
  @@index([userId, year])
}

// SAVINGS & INVESTMENT TRACKING
model SavingsRecord {
  id                String   @id @default(cuid())
  userId            String
  year              Int
  
  // Savings breakdown
  totalSavings      Decimal  @default(0)
  investmentSavings Decimal  @default(0)
  emergencyFund     Decimal  @default(0)
  srsContributions  Decimal  @default(0)
  cpfContributions  Decimal  @default(0)
  otherSavings      Decimal  @default(0)
  
  currency          String   @default("SGD")
  
  // SRS-specific
  srsProvider       String?
  srsTaxSavings     Decimal  @default(0)
  
  // Metadata
  notes             String?
  isEstimated       Boolean  @default(false)
  confidence        String   @default("medium")
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, year])
  @@index([userId, year])
}

// NET WORTH TRACKING
model NetWorthRecord {
  id                String   @id @default(cuid())
  userId            String
  year              Int
  month             Int?     // Optional monthly tracking
  
  // Assets
  totalAssets       Decimal  @default(0)
  portfolioValue    Decimal  @default(0)
  realEstate        Decimal  @default(0)
  cash              Decimal  @default(0)
  srsValue          Decimal  @default(0)
  cpfValue          Decimal  @default(0)
  otherAssets       Decimal  @default(0)
  
  // Liabilities
  totalLiabilities  Decimal  @default(0)
  mortgage          Decimal  @default(0)
  personalLoans     Decimal  @default(0)
  creditCardDebt    Decimal  @default(0)
  otherDebt         Decimal  @default(0)
  
  // Calculated
  netWorth          Decimal  @default(0)
  
  currency          String   @default("SGD")
  
  // Metadata
  notes             String?
  isEstimated       Boolean  @default(false)
  confidence        String   @default("medium")
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, year, month])
  @@index([userId, year])
}

// PORTFOLIO ALLOCATION STRATEGIES
model PortfolioStrategy {
  id                  String   @id @default(cuid())
  userId              String
  
  strategyName        String
  coreTarget          Decimal  @default(25)
  growthTarget        Decimal  @default(55)
  hedgeTarget         Decimal  @default(10)
  liquidityTarget     Decimal  @default(10)
  rebalanceThreshold  Decimal  @default(5)
  
  riskLevel           String   @default("moderate") // conservative, moderate, aggressive
  description         String?
  isActive            Boolean  @default(true)
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isActive])
}

// SRS PLANNING & OPTIMIZATION
model SRSPlan {
  id                    String              @id @default(cuid())
  userId                String
  
  // Optimization settings
  autoOptimize          Boolean             @default(true)
  monthlyTarget         Decimal             @default(0)
  preferredProvider     String              @default("DBS")
  
  // Projections
  projectedTotalAt62    Decimal             @default(0)
  projectedTaxSavings   Decimal             @default(0)
  
  // Withdrawal planning
  withdrawalStartAge    Int?
  withdrawalRate        Decimal?
  withdrawalStrategy    String?
  
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  srsContributions      SRSContribution[]
  
  @@index([userId])
}

// SRS CONTRIBUTION HISTORY
model SRSContribution {
  id                  String   @id @default(cuid())
  srsplanId           String
  year                Int
  
  plannedContribution Decimal  @default(0)
  actualContribution  Decimal  @default(0)
  taxSavings          Decimal  @default(0)
  provider            String
  accountType         String   @default("SRS")
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  srsPlan             SRSPlan  @relation(fields: [srsplanId], references: [id], onDelete: Cascade)
  
  @@unique([srsplanId, year])
  @@index([srsplanId, year])
}

// FI PLANNING & MILESTONES
model FIPlan {
  id                String         @id @default(cuid())
  userId            String
  
  // Core FI targets
  customFIAmount    Decimal        @default(2500000)
  customTargetYear  Int            @default(2032)
  leanFIAmount      Decimal        @default(1850000)
  coastFIAmount     Decimal        @default(0)
  baristaFIAmount   Decimal        @default(0)
  fatFIAmount       Decimal        @default(5000000)
  
  // Geographic planning
  singaporeExpenses Decimal        @default(120000)
  malaysiaExpenses  Decimal        @default(60000)
  thailandExpenses  Decimal        @default(48000)
  philippinesExpenses Decimal      @default(36000)
  customLocation    String?
  customExpenses    Decimal?
  
  // Milestones
  firstMillionAchieved       Boolean  @default(false)
  firstMillionAchievedDate   DateTime?
  leanFIAchieved            Boolean  @default(false)
  leanFIAchievedDate        DateTime?
  fullFIAchieved            Boolean  @default(false)
  fullFIAchievedDate        DateTime?
  fatFIAchieved             Boolean  @default(false)
  fatFIAchievedDate         DateTime?
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  fiProgressRecords FIProgressRecord[]
  
  @@index([userId])
}

// FI PROGRESS TRACKING
model FIProgressRecord {
  id                String   @id @default(cuid())
  fiPlanId          String
  year              Int
  
  netWorth          Decimal  @default(0)
  fiProgress        Decimal  @default(0)
  yearsRemaining    Decimal  @default(0)
  projectedFIDate   String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  fiPlan            FIPlan   @relation(fields: [fiPlanId], references: [id], onDelete: Cascade)
  
  @@unique([fiPlanId, year])
  @@index([fiPlanId, year])
}

// AUDIT LOG FOR DATA CHANGES
model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  
  action    String   // 'created', 'updated', 'deleted'
  tableName String   // Which table was affected
  recordId  String   // ID of the affected record
  field     String?  // Specific field changed
  oldValue  String?  // Previous value (JSON string)
  newValue  String?  // New value (JSON string)
  source    String   @default("user") // 'user', 'system', 'api'
  
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
  @@index([tableName, recordId])
}

// EXISTING MODELS (Preserved from current system)

model AssetCategory {
  id               String     @id @default(cuid())
  userId           String
  name             String     // 'Core', 'Growth', 'Hedge', 'Liquidity'
  targetPercentage Decimal    // 25, 55, 10, 10
  description      String?
  user             User       @relation(fields: [userId], references: [id])
  holdings         Holdings[]
}

model Holdings {
  id           String        @id @default(cuid())
  userId       String
  categoryId   String
  symbol       String
  name         String
  quantity     Decimal?
  
  // Multi-currency storage - all three values stored
  valueSGD     Decimal       // Primary portfolio currency
  valueINR     Decimal       // Converted INR value  
  valueUSD     Decimal       // Converted USD value
  entryCurrency String       @default("SGD") // Original entry currency
  
  costBasis    Decimal?
  location     String        // 'IBKR', 'CoinGecko', 'DBS Bank', etc.
  updatedAt    DateTime      @default(now())
  
  category     AssetCategory @relation(fields: [categoryId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
}

model ExchangeRate {
  id           String   @id @default(cuid())
  fromCurrency String   // SGD, INR, USD
  toCurrency   String   // SGD, INR, USD  
  rate         Decimal  // Exchange rate value
  source       String   @default("api") // 'api' or 'manual'
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([fromCurrency, toCurrency])
  @@index([fromCurrency, toCurrency, updatedAt])
}

model Recommendation {
  id           String   @id @default(cuid())
  userId       String
  actionType   String   // 'urgent', 'opportunity', 'optimization'
  description  String
  dollarImpact Decimal?
  priority     Int      @default(1)
  completed    Boolean  @default(false)
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
}