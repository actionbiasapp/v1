'use client';

import { useState, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { FinancialProfile, createDefaultFinancialProfile } from '@/app/lib/types/shared';

// Enhanced default profile with all required fields
const DEFAULT_PROFILE: FinancialProfile = {
  ...createDefaultFinancialProfile(),
  // Ensure all fields are properly initialized
  annualIncome: 120000,
  incomeCurrency: 'SGD',
  taxStatus: 'Employment Pass',
  currentSRSContributions: 0,
  fiGoal: 2500000,
  fiTargetYear: 2032,
  firstMillionTarget: true,
  bonusIncome: 0,
  otherIncome: 0,
  coreTarget: 25,
  growthTarget: 55,
  hedgeTarget: 10,
  liquidityTarget: 10,
  rebalanceThreshold: 5,
  profileCompleteness: 0,
  srsAutoOptimize: true,
  customFIAmount: undefined,
  customTargetYear: undefined
};

interface FinancialSetupModalProps {
  isOpen: boolean;
  onClose: () => void;
  onProfileUpdate?: (profile: FinancialProfile) => void;
  initialProfile?: FinancialProfile;
}

interface YearlyData {
  year: number;
  income: number;
  expenses: number;
  savings: number;
  srsContributions: number;
  netWorth: number;
}

export default function FinancialSetupModal({ 
  isOpen, 
  onClose, 
  onProfileUpdate,
  initialProfile 
}: FinancialSetupModalProps) {
  const [profile, setProfile] = useState<FinancialProfile>(DEFAULT_PROFILE);
  const [yearlyData, setYearlyData] = useState<YearlyData[]>([]);
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState(0);
  const [showAddYear, setShowAddYear] = useState(false);
  const [editingYear, setEditingYear] = useState<YearlyData | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Load existing profile
  useEffect(() => {
    console.log("🔍 Modal useEffect - isOpen:", isOpen, "initialProfile:", !!initialProfile);
    
    if (isOpen) {
      setError(null); // Clear any previous errors
      
      if (initialProfile) {
        console.log("📥 Using initialProfile:", initialProfile);
        setProfile({ ...DEFAULT_PROFILE, ...initialProfile });
      }
      
      // Always load from API to get latest data
      loadProfile();
    }
  }, [isOpen, initialProfile]);

  const loadProfile = async () => {
    console.log("📞 loadProfile() - Fetching from /api/financial-profile");
    
    try {
      const response = await fetch('/api/financial-profile', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      console.log("📡 API Response status:", response.status);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${await response.text()}`);
      }

      const result = await response.json();
      console.log("📊 API Response:", result);

      if (result.success && result.data) {
        // Map API data to FinancialProfile format
        const loadedProfile: FinancialProfile = {
          annualIncome: result.data.income || 120000,
          incomeCurrency: result.data.incomeCurrency || 'SGD',
          taxStatus: result.data.taxStatus || 'Employment Pass',
          currentSRSContributions: result.data.srsContributions || 0,
          fiGoal: result.data.fiTarget || 2500000,
          fiTargetYear: result.data.fiYear || 2032,
          
          // Optional fields with defaults
          firstMillionTarget: result.data.firstMillionTarget !== false,
          bonusIncome: result.data.bonusIncome || 0,
          otherIncome: result.data.otherIncome || 0,
          coreTarget: result.data.coreTarget || 25,
          growthTarget: result.data.growthTarget || 55,
          hedgeTarget: result.data.hedgeTarget || 10,
          liquidityTarget: result.data.liquidityTarget || 10,
          rebalanceThreshold: result.data.rebalanceThreshold || 5,
          profileCompleteness: result.data.profileCompleteness || 0,
          srsAutoOptimize: result.data.srsAutoOptimize !== false,
          customFIAmount: result.data.customFIAmount || undefined,
          customTargetYear: result.data.customTargetYear || undefined
        };
        
        console.log("✅ Setting loaded profile:", loadedProfile);
        setProfile(loadedProfile);
        
        // Set yearly data if available
        if (result.yearlyData && Array.isArray(result.yearlyData)) {
          console.log('📅 Setting yearlyData:', result.yearlyData.length, 'records');
          setYearlyData(result.yearlyData);
        } else {
          setYearlyData([]);
        }
      } else {
        console.log('⚠️ API returned unsuccessful response:', result);
        setError(result.error || 'Failed to load profile data');
      }
      
    } catch (error) {
      console.error('❌ Failed to load profile:', error);
      setError(error instanceof Error ? error.message : 'Network error loading profile');
    }
  };

  const saveProfile = async () => {
    console.log("💾 saveProfile() - Starting save process...");
    setLoading(true);
    setError(null);
    
    try {
      // Prepare data for API
      const currentYear = new Date().getFullYear();
      const currentYearExpenses = yearlyData.find(y => y.year === currentYear)?.expenses || 
                                  Math.round((profile.annualIncome || 120000) * 0.6); // Default 60% expenses
      
      const saveData = {
        data: {
          income: profile.annualIncome || 120000,
          incomeCurrency: profile.incomeCurrency || 'SGD',
          taxStatus: profile.taxStatus || 'Employment Pass',
          srsContributions: profile.currentSRSContributions || 0,
          expenses: currentYearExpenses,
          fiTarget: profile.fiGoal || 2500000,
          fiYear: profile.fiTargetYear || 2032,
          
          // Additional fields
          firstMillionTarget: profile.firstMillionTarget !== false,
          bonusIncome: profile.bonusIncome || 0,
          otherIncome: profile.otherIncome || 0,
          coreTarget: profile.coreTarget || 25,
          growthTarget: profile.growthTarget || 55,
          hedgeTarget: profile.hedgeTarget || 10,
          liquidityTarget: profile.liquidityTarget || 10,
          rebalanceThreshold: profile.rebalanceThreshold || 5,
          profileCompleteness: calculateCompleteness(),
          srsAutoOptimize: profile.srsAutoOptimize !== false,
          customFIAmount: profile.customFIAmount || null,
          customTargetYear: profile.customTargetYear || null
        },
        yearlyData: yearlyData
      };

      console.log("📤 Sending save data:", {
        income: saveData.data.income,
        taxStatus: saveData.data.taxStatus,
        yearlyDataCount: saveData.yearlyData.length
      });

      const response = await fetch('/api/financial-profile', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(saveData)
      });
      
      console.log("📡 Save response status:", response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }
      
      const result = await response.json();
      console.log("📊 Save response:", result);
      
      if (result.success) {
        console.log("✅ Profile saved successfully");
        onProfileUpdate?.(profile);
        onClose();
      } else {
        throw new Error(result.error || 'Save operation failed');
      }
      
    } catch (error) {
      console.error('❌ Save failed:', error);
      const errorMessage = error instanceof Error ? error.message : 'Network error during save';
      setError(`Save failed: ${errorMessage}`);
    } finally {
      setLoading(false);
    }
  };

  const calculateCompleteness = (): number => {
    let completed = 0;
    const totalFields = 8;
    
    // Core financial fields
    if (profile.annualIncome && profile.annualIncome > 0) completed++;
    if (profile.taxStatus && profile.taxStatus !== '') completed++;
    if (profile.currentSRSContributions !== undefined) completed++;
    if (profile.fiGoal && profile.fiGoal > 0) completed++;
    if (profile.fiTargetYear && profile.fiTargetYear > 2020) completed++;
    
    // Data quality indicators
    if (yearlyData.length >= 1) completed++;
    if (yearlyData.length >= 2) completed++; // Multiple years bonus
    if (yearlyData.some(y => y.srsContributions > 0)) completed++; // SRS data bonus
    
    return Math.round((completed / totalFields) * 100);
  };

  // Smart defaults for new year entries
  const getCurrentYear = () => new Date().getFullYear();
  
  const getSmartDefaults = (): YearlyData => {
    const currentYear = getCurrentYear();
    const lastYear = yearlyData.sort((a, b) => b.year - a.year)[0];
    
    if (!lastYear) {
      return {
        year: currentYear - 1,
        income: profile.annualIncome || 120000,
        expenses: Math.round((profile.annualIncome || 120000) * 0.6),
        savings: Math.round((profile.annualIncome || 120000) * 0.4),
        srsContributions: 0,
        netWorth: 350000
      };
    }
    
    return {
      year: lastYear.year - 1,
      income: Math.round(lastYear.income * 1.05), // 5% growth
      expenses: Math.round(lastYear.expenses * 1.03), // 3% inflation
      savings: Math.round(lastYear.income * 1.05) - Math.round(lastYear.expenses * 1.03),
      srsContributions: 0,
      netWorth: Math.round(lastYear.netWorth * 0.9) // Conservative estimate
    };
  };

  const addYear = (yearData: YearlyData) => {
    setYearlyData(prev => [...prev, yearData].sort((a, b) => b.year - a.year));
    setShowAddYear(false);
    setEditingYear(null);
  };

  const updateYear = (yearData: YearlyData) => {
    setYearlyData(prev => prev.map(y => y.year === yearData.year ? yearData : y));
    setEditingYear(null);
  };

  const deleteYear = (year: number) => {
    if (confirm(`Delete data for ${year}?`)) {
      setYearlyData(prev => prev.filter(y => y.year !== year));
    }
  };

  if (!isOpen) return null;

  const tabs = ['📊 Profile', '⚙️ Manage Data'];
  const srsMax = profile.taxStatus === 'Employment Pass' ? 35700 : 15000;
  const currentNetWorth = yearlyData[0]?.netWorth || (profile.annualIncome || 120000) * 4;
  const fiProgress = (currentNetWorth / (profile.fiGoal || 2500000)) * 100;

  return createPortal(
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-slate-800 rounded-2xl border border-slate-700 w-full max-w-3xl max-h-[90vh] flex flex-col">
        
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-slate-700">
          <h2 className="text-lg font-semibold text-white">Financial Setup</h2>
          <button onClick={onClose} className="text-slate-400 hover:text-white">✕</button>
        </div>

        {/* Error Display */}
        {error && (
          <div className="mx-4 mt-4 p-3 bg-red-900/30 border border-red-500/30 rounded-lg">
            <div className="text-red-300 text-sm">❌ {error}</div>
          </div>
        )}

        {/* Tabs */}
        <div className="flex border-b border-slate-700">
          {tabs.map((tab, index) => (
            <button
              key={index}
              onClick={() => setActiveTab(index)}
              className={`flex-1 p-3 text-sm font-medium transition-colors ${
                activeTab === index 
                  ? 'text-white bg-slate-700/50 border-b-2 border-blue-500' 
                  : 'text-slate-400 hover:text-white'
              }`}
            >
              {tab}
            </button>
          ))}
        </div>

        {/* Content */}
        <div className="flex-1 overflow-y-auto p-4">
          {activeTab === 0 && (
            <ProfileTab 
              profile={profile}
              setProfile={setProfile}
              yearlyData={yearlyData}
              fiProgress={fiProgress}
              srsMax={srsMax}
              currentNetWorth={currentNetWorth}
            />
          )}
          
          {activeTab === 1 && (
            <ManageDataTab
              yearlyData={yearlyData}
              showAddYear={showAddYear}
              setShowAddYear={setShowAddYear}
              editingYear={editingYear}
              setEditingYear={setEditingYear}
              addYear={addYear}
              updateYear={updateYear}
              deleteYear={deleteYear}
              getSmartDefaults={getSmartDefaults}
              profile={profile}
              setProfile={setProfile}
            />
          )}
        </div>

        {/* Footer */}
        <div className="border-t border-slate-700 p-4 flex justify-end gap-3">
          <button 
            onClick={onClose} 
            className="px-4 py-2 text-slate-400 hover:text-white"
            disabled={loading}
          >
            Cancel
          </button>
          <button 
            onClick={saveProfile}
            disabled={loading}
            className="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
          >
            {loading && (
              <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
            )}
            {loading ? 'Saving...' : 'Save'}
          </button>
        </div>
      </div>
    </div>,
    document.body
  );
}

// ENHANCED PROFILE TAB - Data Display + Real-time Intelligence
function ProfileTab({ profile, setProfile, yearlyData, fiProgress, srsMax, currentNetWorth }: any) {
  const currentYear = new Date().getFullYear();
  const currentYearData = yearlyData.find((y: any) => y.year === currentYear);
  const srsProgress = ((profile.currentSRSContributions || 0) / srsMax) * 100;
  
  // Calculate savings rate
  const savingsRate = currentYearData 
    ? Math.round(((currentYearData.income - currentYearData.expenses) / currentYearData.income) * 100)
    : profile.annualIncome ? Math.round(((profile.annualIncome - (profile.annualIncome * 0.6)) / profile.annualIncome) * 100) : 40;

  return (
    <div className="space-y-6">
      {/* Core Profile Quick Edit */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm text-slate-300 mb-1">Annual Income (S$)</label>
          <input
            type="number"
            value={profile.annualIncome || ''}
            onChange={(e) => setProfile((prev: any) => ({
              ...prev, 
              annualIncome: e.target.value ? Number(e.target.value) : undefined
            }))}
            className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white"
            placeholder="120000"
          />
        </div>
        <div>
          <label className="block text-sm text-slate-300 mb-1">Tax Status</label>
          <select
            value={profile.taxStatus || 'Employment Pass'}
            onChange={(e) => setProfile((prev: any) => ({...prev, taxStatus: e.target.value}))}
            className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white"
          >
            <option value="Employment Pass">Employment Pass</option>
            <option value="Citizen">Singapore Citizen</option>
            <option value="PR">Permanent Resident</option>
            <option value="Other">Other</option>
          </select>
        </div>
      </div>

      {/* Financial Overview Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="bg-slate-700/30 rounded-lg p-4">
          <div className="text-xs text-slate-400 mb-1">ANNUAL INCOME</div>
          <div className="text-2xl font-bold text-white">S${(profile.annualIncome || 0).toLocaleString()}</div>
          <div className="text-xs text-slate-400">{profile.taxStatus}</div>
        </div>
        <div className="bg-slate-700/30 rounded-lg p-4">
          <div className="text-xs text-slate-400 mb-1">NET WORTH</div>
          <div className="text-2xl font-bold text-emerald-400">S${currentNetWorth.toLocaleString()}</div>
          <div className="text-xs text-slate-400">Current portfolio value</div>
        </div>
        <div className="bg-slate-700/30 rounded-lg p-4">
          <div className="text-xs text-slate-400 mb-1">SAVINGS RATE</div>
          <div className="text-2xl font-bold text-blue-400">{savingsRate}%</div>
          <div className="text-xs text-slate-400">Annual savings rate</div>
        </div>
      </div>

      {/* FI Goals Section */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm text-slate-300 mb-1">FI Goal (S$)</label>
          <input
            type="number"
            value={profile.fiGoal || ''}
            onChange={(e) => setProfile((prev: any) => ({
              ...prev, 
              fiGoal: e.target.value ? Number(e.target.value) : undefined
            }))}
            className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white"
            placeholder="2500000"
          />
        </div>
        <div>
          <label className="block text-sm text-slate-300 mb-1">Target Year</label>
          <input
            type="number"
            value={profile.fiTargetYear || ''}
            onChange={(e) => setProfile((prev: any) => ({
              ...prev, 
              fiTargetYear: e.target.value ? Number(e.target.value) : undefined
            }))}
            className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white"
            placeholder="2032"
          />
        </div>
      </div>

      {/* SRS Contribution Input */}
      <div>
        <label className="block text-sm text-slate-300 mb-1">
          SRS Contributions {currentYear} (S$) 
          <span className="text-slate-400 ml-2">Max: S${srsMax.toLocaleString()}</span>
        </label>
        <input
          type="number"
          value={profile.currentSRSContributions || ''}
          onChange={(e) => setProfile((prev: any) => ({
            ...prev, 
            currentSRSContributions: e.target.value ? Number(e.target.value) : 0
          }))}
          className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white"
          placeholder="0"
          max={srsMax}
        />
      </div>

      {/* Progress Tracking */}
      <div className="space-y-4">
        <div className="bg-slate-700/30 rounded-lg p-4">
          <div className="flex justify-between text-sm mb-2">
            <span className="text-slate-300">FI Progress</span>
            <span className="text-white">{fiProgress.toFixed(1)}%</span>
          </div>
          <div className="w-full bg-slate-600 rounded-full h-3">
            <div 
              className="h-3 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full transition-all duration-500"
              style={{ width: `${Math.min(fiProgress, 100)}%` }}
            />
          </div>
          <div className="text-xs text-slate-400 mt-1">
            S${((profile.fiGoal || 2500000) - currentNetWorth).toLocaleString()} to FI goal
          </div>
        </div>

        <div className="bg-slate-700/30 rounded-lg p-4">
          <div className="flex justify-between text-sm mb-2">
            <span className="text-slate-300">SRS Contributions {currentYear}</span>
            <span className="text-white">{srsProgress.toFixed(1)}%</span>
          </div>
          <div className="w-full bg-slate-600 rounded-full h-3">
            <div 
              className="h-3 bg-gradient-to-r from-emerald-500 to-green-500 rounded-full transition-all duration-500"
              style={{ width: `${Math.min(srsProgress, 100)}%` }}
            />
          </div>
          <div className="text-xs text-slate-400 mt-1">
            S${(profile.currentSRSContributions || 0).toLocaleString()} of S${srsMax.toLocaleString()} limit
          </div>
        </div>
      </div>

      {/* Smart Insights */}
      <div className="bg-slate-700/30 rounded-lg p-4">
        <h3 className="font-medium text-white mb-3">💡 Smart Insights</h3>
        <div className="space-y-2 text-sm">
          {srsProgress < 80 && (
            <div className="flex items-center gap-2">
              <span className="text-amber-400">⚠</span>
              <span className="text-slate-300">
                Consider increasing SRS contributions by S${(srsMax - (profile.currentSRSContributions || 0)).toLocaleString()} 
                to maximize tax savings
              </span>
            </div>
          )}
          {fiProgress < 20 && (
            <div className="flex items-center gap-2">
              <span className="text-blue-400">📈</span>
              <span className="text-slate-300">
                At current savings rate, you're on track for {profile.fiTargetYear || 2032} FI target
              </span>
            </div>
          )}
          {yearlyData.length >= 2 && (
            <div className="flex items-center gap-2">
              <span className="text-emerald-400">✓</span>
              <span className="text-slate-300">
                Great job tracking {yearlyData.length} years of financial data!
              </span>
            </div>
          )}
          {yearlyData.length === 0 && (
            <div className="flex items-center gap-2">
              <span className="text-yellow-400">📊</span>
              <span className="text-slate-300">
                Add historical data in the "Manage Data" tab for better insights
              </span>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

// ENHANCED MANAGE DATA TAB - Full CRUD Operations
function ManageDataTab({ 
  yearlyData, showAddYear, setShowAddYear, editingYear, setEditingYear,
  addYear, updateYear, deleteYear, getSmartDefaults, profile, setProfile 
}: any) {
  return (
    <div className="space-y-4">
      {/* Data Quality Overview */}
      <div className="bg-slate-700/30 rounded-lg p-4">
        <h3 className="font-medium text-white mb-2">📊 Data Overview</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
          <div>
            <div className="text-slate-400">Years Tracked</div>
            <div className="text-white font-bold">{yearlyData.length}</div>
          </div>
          <div>
            <div className="text-slate-400">Avg Savings Rate</div>
            <div className="text-emerald-400 font-bold">
              {yearlyData.length > 0 
                ? Math.round(yearlyData.reduce((acc: number, y: any) => acc + ((y.income - y.expenses) / y.income * 100), 0) / yearlyData.length)
                : 0}%
            </div>
          </div>
          <div>
            <div className="text-slate-400">Total SRS</div>
            <div className="text-yellow-400 font-bold">
              S${yearlyData.reduce((acc: number, y: any) => acc + y.srsContributions, 0).toLocaleString()}
            </div>
          </div>
          <div>
            <div className="text-slate-400">Profile Quality</div>
            <div className="text-blue-400 font-bold">{profile.profileCompleteness || 0}%</div>
          </div>
        </div>
      </div>

      {/* Yearly Data Management */}
      <div className="flex justify-between items-center">
        <h3 className="font-medium text-white">Historical Financial Data</h3>
        <button
          onClick={() => setShowAddYear(true)}
          className="px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700"
        >
          Add Year
        </button>
      </div>

      {yearlyData.length > 0 ? (
        <div className="space-y-3">
          {yearlyData.map((year: any) => (
            <div key={year.year} className="bg-slate-700/30 rounded-lg p-4">
              <div className="flex justify-between items-start mb-3">
                <h4 className="font-medium text-white">{year.year}</h4>
                <div className="flex gap-2">
                  <button
                    onClick={() => setEditingYear(year)}
                    className="text-xs px-2 py-1 bg-blue-600 text-white rounded hover:bg-blue-700"
                  >
                    Edit
                  </button>
                  <button
                    onClick={() => deleteYear(year.year)}
                    className="text-xs px-2 py-1 bg-red-600 text-white rounded hover:bg-red-700"
                  >
                    Delete
                  </button>
                </div>
              </div>
              <div className="grid grid-cols-2 md:grid-cols-5 gap-4 text-sm">
                <div>
                  <div className="text-slate-400">Income</div>
                  <div className="text-blue-400">S${year.income.toLocaleString()}</div>
                </div>
                <div>
                  <div className="text-slate-400">Expenses</div>
                  <div className="text-red-400">S${year.expenses.toLocaleString()}</div>
                </div>
                <div>
                  <div className="text-slate-400">Savings</div>
                  <div className="text-emerald-400">S${year.savings.toLocaleString()}</div>
                </div>
                <div>
                  <div className="text-slate-400">SRS</div>
                  <div className="text-yellow-400">S${year.srsContributions.toLocaleString()}</div>
                </div>
                <div>
                  <div className="text-slate-400">Net Worth</div>
                  <div className="text-white">S${year.netWorth.toLocaleString()}</div>
                </div>
              </div>
              <div className="text-xs text-slate-400 mt-2">
                Savings Rate: {year.income > 0 ? Math.round(((year.income - year.expenses) / year.income) * 100) : 0}%
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="text-slate-400 text-center py-8">
          <div className="text-4xl mb-2">📊</div>
          <div className="font-medium mb-1">No historical data yet</div>
          <div className="text-sm">Add years to track your financial journey and get better insights</div>
        </div>
      )}

      {/* Add/Edit Year Modal */}
      {(showAddYear || editingYear) && (
        <YearEditModal
          yearData={editingYear || getSmartDefaults()}
          onSave={editingYear ? updateYear : addYear}
          onClose={() => {
            setShowAddYear(false);
            setEditingYear(null);
          }}
          isEditing={!!editingYear}
        />
      )}
    </div>
  );
}

// ENHANCED Year Edit Modal Component
function YearEditModal({ yearData, onSave, onClose, isEditing }: any) {
  const [formData, setFormData] = useState(yearData);
  const [errors, setErrors] = useState<Record<string, string>>({});

  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    
    if (!formData.year || formData.year < 2000 || formData.year > new Date().getFullYear()) {
      newErrors.year = 'Please enter a valid year';
    }
    if (!formData.income || formData.income < 0) {
      newErrors.income = 'Income must be positive';
    }
    if (formData.expenses < 0) {
      newErrors.expenses = 'Expenses cannot be negative';
    }
    if (formData.srsContributions < 0) {
      newErrors.srsContributions = 'SRS contributions cannot be negative';
    }
    if (formData.netWorth < 0) {
      newErrors.netWorth = 'Net worth cannot be negative';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    const savings = formData.income - formData.expenses;
    onSave({ ...formData, savings });
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-10">
      <div className="bg-slate-800 rounded-xl p-6 w-full max-w-md border border-slate-700">
        <h3 className="text-lg font-bold text-white mb-4">
          {isEditing ? `Edit ${formData.year}` : 'Add Year Data'}
        </h3>
        
        <form onSubmit={handleSubmit} className="space-y-3">
          <div>
            <label className="block text-sm text-slate-400 mb-1">Year *</label>
            <input
              type="number"
              value={formData.year}
              onChange={(e) => setFormData({...formData, year: Number(e.target.value)})}
              className={`w-full px-3 py-2 bg-slate-700 border rounded text-white ${
                errors.year ? 'border-red-500' : 'border-slate-600'
              }`}
              required
            />
            {errors.year && <div className="text-red-400 text-xs mt-1">{errors.year}</div>}
          </div>
          
          <div>
            <label className="block text-sm text-slate-400 mb-1">Income (S$) *</label>
            <input
              type="number"
              value={formData.income}
              onChange={(e) => setFormData({...formData, income: Number(e.target.value)})}
              className={`w-full px-3 py-2 bg-slate-700 border rounded text-white ${
                errors.income ? 'border-red-500' : 'border-slate-600'
              }`}
              required
            />
            {errors.income && <div className="text-red-400 text-xs mt-1">{errors.income}</div>}
          </div>
          
          <div>
            <label className="block text-sm text-slate-400 mb-1">Expenses (S$) *</label>
            <input
              type="number"
              value={formData.expenses}
              onChange={(e) => setFormData({...formData, expenses: Number(e.target.value)})}
              className={`w-full px-3 py-2 bg-slate-700 border rounded text-white ${
                errors.expenses ? 'border-red-500' : 'border-slate-600'
              }`}
              required
            />
            {errors.expenses && <div className="text-red-400 text-xs mt-1">{errors.expenses}</div>}
          </div>
          
          <div>
            <label className="block text-sm text-slate-400 mb-1">SRS Contributions (S$)</label>
            <input
              type="number"
              value={formData.srsContributions}
              onChange={(e) => setFormData({...formData, srsContributions: Number(e.target.value)})}
              className={`w-full px-3 py-2 bg-slate-700 border rounded text-white ${
                errors.srsContributions ? 'border-red-500' : 'border-slate-600'
              }`}
            />
            {errors.srsContributions && <div className="text-red-400 text-xs mt-1">{errors.srsContributions}</div>}
          </div>
          
          <div>
            <label className="block text-sm text-slate-400 mb-1">Net Worth (S$) *</label>
            <input
              type="number"
              value={formData.netWorth}
              onChange={(e) => setFormData({...formData, netWorth: Number(e.target.value)})}
              className={`w-full px-3 py-2 bg-slate-700 border rounded text-white ${
                errors.netWorth ? 'border-red-500' : 'border-slate-600'
              }`}
              required
            />
            {errors.netWorth && <div className="text-red-400 text-xs mt-1">{errors.netWorth}</div>}
          </div>
          
          {/* Calculated Savings Display */}
          <div className="bg-slate-700/30 rounded p-3">
            <div className="text-xs text-slate-400 mb-1">Calculated Savings</div>
            <div className="text-emerald-400 font-bold">
              S${(formData.income - formData.expenses).toLocaleString()}
            </div>
            <div className="text-xs text-slate-400">
              Savings Rate: {formData.income > 0 ? Math.round(((formData.income - formData.expenses) / formData.income) * 100) : 0}%
            </div>
          </div>
          
          <div className="flex gap-2 pt-4">
            <button
              type="button"
              onClick={onClose}
              className="flex-1 px-3 py-2 bg-slate-600 text-white rounded hover:bg-slate-700"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="flex-1 px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            >
              {isEditing ? 'Update' : 'Add'} Year
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}