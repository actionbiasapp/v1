// app/lib/types/financial.ts
// Comprehensive Financial Data Model for V5.3D - Unlimited Multi-Year Support

// CORE FINANCIAL DATA INTERFACES

export interface IncomeRecord {
  year: number;                    // 2015-2035+ supported
  employmentIncome: number;        // Primary employment income
  bonusIncome: number;            // Variable compensation  
  investmentIncome: number;       // Dividends, interest, capital gains
  businessIncome: number;         // Self-employment, side business
  otherIncome: number;           // Rental, royalties, other sources
  totalIncome: number;           // Calculated total
  currency: 'SGD' | 'USD' | 'INR';
  taxesPaid: number;             // Actual taxes paid for the year
  notes?: string;                // Additional context
  
  // Metadata
  isEstimated: boolean;          // Whether data is estimated vs actual
  confidence: 'low' | 'medium' | 'high'; // Data quality indicator
  lastUpdated: Date;
}

export interface ExpenseRecord {
  year: number;                   // Same year range as income
  totalExpenses: number;          // Single total for V5.3D (expandable later)
  currency: 'SGD' | 'USD' | 'INR';
  
  // Calculated fields
  savingsRate: number;           // (Income - Expenses) / Income * 100
  savingsAmount: number;         // Income - Expenses
  
  // Optional detailed breakdown (for future expansion)
  housing?: number;              // Rent, mortgage, utilities
  transportation?: number;       // Car, public transport, fuel
  food?: number;                // Groceries, dining out
  healthcare?: number;          // Insurance, medical, dental
  entertainment?: number;       // Travel, hobbies, subscriptions
  other?: number;               // Miscellaneous expenses
  
  notes?: string;               // Additional context
  isEstimated: boolean;         // Data quality
  confidence: 'low' | 'medium' | 'high';
  lastUpdated: Date;
}

export interface SavingsRecord {
  year: number;
  totalSavings: number;          // Total amount saved during year
  investmentSavings: number;     // Amount invested in portfolio
  emergencyFund: number;         // Emergency fund contributions
  srsContributions: number;      // SRS contributions
  cpfContributions: number;      // CPF (for citizens/PRs)
  otherSavings: number;         // Other savings vehicles
  currency: 'SGD' | 'USD' | 'INR';
  
  // SRS-specific tracking
  srsProvider?: string;         // DBS, OCBC, UOB, etc.
  srsTaxSavings: number;        // Actual tax savings realized
  
  notes?: string;
  isEstimated: boolean;
  confidence: 'low' | 'medium' | 'high';
  lastUpdated: Date;
}

export interface NetWorthRecord {
  year: number;
  month?: number;                // Optional monthly tracking
  
  // Assets
  totalAssets: number;           // Total portfolio + other assets
  portfolioValue: number;        // Investment portfolio subset
  realEstate: number;           // Property values
  cash: number;                 // Cash and cash equivalents
  srsValue: number;             // SRS account values
  cpfValue: number;             // CPF values (citizens/PRs)
  otherAssets: number;          // Vehicles, collectibles, etc.
  
  // Liabilities
  totalLiabilities: number;      // Total debts
  mortgage: number;             // Home mortgage
  personalLoans: number;        // Personal/car loans
  creditCardDebt: number;       // Credit card balances
  otherDebt: number;           // Other liabilities
  
  // Calculated
  netWorth: number;             // Assets - Liabilities
  
  currency: 'SGD' | 'USD' | 'INR';
  notes?: string;
  isEstimated: boolean;
  confidence: 'low' | 'medium' | 'high';
  lastUpdated: Date;
}

// PORTFOLIO ALLOCATION STRATEGY

export interface PortfolioAllocationStrategy {
  strategyName: string;          // e.g., "Conservative EP Strategy"
  coreTarget: number;            // Target % for Core holdings
  growthTarget: number;          // Target % for Growth holdings  
  hedgeTarget: number;           // Target % for Hedge holdings
  liquidityTarget: number;       // Target % for Liquidity holdings
  rebalanceThreshold: number;    // Threshold for rebalancing alerts
  
  // Strategy metadata
  riskLevel: 'conservative' | 'moderate' | 'aggressive';
  description?: string;
  createdDate: Date;
  lastUpdated: Date;
  isActive: boolean;
}

// SRS PLANNING & OPTIMIZATION

export interface SRSPlan {
  // Multi-year contribution planning
  contributionHistory: Array<{
    year: number;
    plannedContribution: number;
    actualContribution: number;
    taxSavings: number;
    provider: string;            // DBS, OCBC, UOB, etc.
    accountType: string;         // SRS, CPFIS, etc.
  }>;
  
  // Optimization settings
  autoOptimize: boolean;
  monthlyTarget: number;         // Current year monthly target
  preferredProvider: string;
  
  // Projections
  projectedTotalAt62: number;    // Total SRS value at withdrawal age
  projectedTaxSavings: number;   // Lifetime tax savings
  
  // Withdrawal planning
  withdrawalStrategy?: {
    startAge: number;            // When to start withdrawals
    withdrawalRate: number;      // Annual withdrawal %
    taxStrategy: string;         // Withdrawal tax optimization
  };
}

// FI PLANNING & MILESTONES

export interface FIPlan {
  // Core FI targets
  customFIAmount: number;        // User's FI target
  customTargetYear: number;      // Target FI year
  leanFIAmount: number;         // Geographic arbitrage target
  coastFIAmount: number;        // Coast FI calculation
  baristaFIAmount: number;      // Part-time work target
  fatFIAmount: number;          // Luxury retirement target
  
  // Progress tracking
  fiProgressHistory: Array<{
    year: number;
    netWorth: number;
    fiProgress: number;          // Percentage to FI
    yearsRemaining: number;
    projectedFIDate: string;
  }>;
  
  // Geographic arbitrage planning
  geographicPlans: {
    singapore: { 
      annualExpenses: number; 
      feasible: boolean; 
      fiRequired: number;
    };
    malaysia: { 
      annualExpenses: number; 
      feasible: boolean; 
      fiRequired: number;
    };
    thailand: { 
      annualExpenses: number; 
      feasible: boolean; 
      fiRequired: number;
    };
    philippines: { 
      annualExpenses: number; 
      feasible: boolean; 
      fiRequired: number;
    };
    custom?: { 
      location: string; 
      annualExpenses: number; 
      feasible: boolean; 
      fiRequired: number;
    };
  };
  
  // Milestone tracking
  milestones: {
    firstMillion: { achieved: boolean; achievedDate?: Date; projectedDate?: Date; };
    leanFI: { achieved: boolean; achievedDate?: Date; projectedDate?: Date; };
    fullFI: { achieved: boolean; achievedDate?: Date; projectedDate?: Date; };
    fatFI: { achieved: boolean; achievedDate?: Date; projectedDate?: Date; };
  };
}

// COMPREHENSIVE FINANCIAL PROFILE

export interface ComprehensiveFinancialProfile {
  // Basic profile info (backwards compatible with existing)
  userId: string;
  basicInfo: {
    primaryCurrency: 'SGD' | 'USD' | 'INR';
    taxStatus: 'Employment Pass' | 'Citizen' | 'PR';
    country: string;             // Primary residence
    birthYear?: number;          // For age-based calculations
  };
  
  // Multi-year financial data
  incomeHistory: IncomeRecord[];
  expenseHistory: ExpenseRecord[];
  savingsHistory: SavingsRecord[];
  netWorthHistory: NetWorthRecord[];
  
  // Strategic planning
  portfolioStrategy: PortfolioAllocationStrategy;
  srsPlanning: SRSPlan;
  fiPlanning: FIPlan;
  
  // Profile metadata
  profileMetadata: {
    profileCompleteness: number;   // 0-100% based on data richness
    dataQuality: number;          // 0-100% based on data accuracy
    yearsOfData: number;          // Count of years with financial data
    lastUpdated: Date;
    
    // Data preferences
    autoUpdatePortfolio: boolean; // Sync with portfolio changes
    reminderSettings: {
      srsDeadlineReminder: boolean;
      rebalanceReminder: boolean;
      fiProgressReminder: boolean;
    };
    
    // Privacy settings
    dataPrivacy: {
      shareAnonymizedData: boolean; // Contribute to benchmarks
      shareWithAdvisor: boolean;    // Future advisor integration
      exportDataAllowed: boolean;   // Allow data export
    };
  };
  
  // Audit trail
  auditLog: Array<{
    timestamp: Date;
    action: string;               // 'created', 'updated', 'deleted'
    field: string;               // Field that was changed
    oldValue?: any;              // Previous value
    newValue?: any;              // New value
    source: 'user' | 'system' | 'api'; // Source of change
  }>;
}

// UTILITY FUNCTIONS FOR FINANCIAL DATA

export class FinancialDataUtils {
  // Calculate financial metrics
  static calculateSavingsRate(income: number, expenses: number): number {
    if (income <= 0) return 0;
    return ((income - expenses) / income) * 100;
  }
  
  static calculateNetWorth(assets: number, liabilities: number): number {
    return assets - liabilities;
  }
  
  static calculateFIProgress(currentNetWorth: number, fiTarget: number): number {
    return Math.min((currentNetWorth / fiTarget) * 100, 100);
  }
  
  static calculateYearsToFI(
    currentNetWorth: number, 
    annualSavings: number, 
    fiTarget: number, 
    expectedReturn: number = 0.07
  ): number {
    if (annualSavings <= 0 || currentNetWorth >= fiTarget) return 0;
    
    // Using compound growth formula
    const monthlyReturn = expectedReturn / 12;
    const monthlySavings = annualSavings / 12;
    const remainingAmount = fiTarget - currentNetWorth;
    
    // Simplified calculation - can be enhanced with more sophisticated modeling
    return Math.max(0, Math.ceil(remainingAmount / (annualSavings + currentNetWorth * expectedReturn)));
  }
  
  // Data validation
  static validateIncomeRecord(record: Partial<IncomeRecord>): boolean {
    return !!(
      record.year && 
      record.year >= 2000 && 
      record.year <= new Date().getFullYear() + 5 &&
      record.currency &&
      (record.employmentIncome || 0) >= 0
    );
  }
  
  static validateExpenseRecord(record: Partial<ExpenseRecord>): boolean {
    return !!(
      record.year && 
      record.year >= 2000 && 
      record.year <= new Date().getFullYear() + 5 &&
      record.currency &&
      (record.totalExpenses || 0) >= 0
    );
  }
  
  // Data analysis
  static calculateTrends(records: Array<{year: number, value: number}>): {
    trend: 'increasing' | 'decreasing' | 'stable';
    averageGrowthRate: number;
    volatility: number;
  } {
    if (records.length < 2) {
      return { trend: 'stable', averageGrowthRate: 0, volatility: 0 };
    }
    
    const sortedRecords = records.sort((a, b) => a.year - b.year);
    const growthRates: number[] = [];
    
    for (let i = 1; i < sortedRecords.length; i++) {
      const prevValue = sortedRecords[i - 1].value;
      const currentValue = sortedRecords[i].value;
      
      if (prevValue > 0) {
        const growthRate = ((currentValue - prevValue) / prevValue) * 100;
        growthRates.push(growthRate);
      }
    }
    
    const averageGrowthRate = growthRates.reduce((sum, rate) => sum + rate, 0) / growthRates.length;
    
    // Calculate volatility (standard deviation of growth rates)
    const variance = growthRates.reduce((sum, rate) => sum + Math.pow(rate - averageGrowthRate, 2), 0) / growthRates.length;
    const volatility = Math.sqrt(variance);
    
    let trend: 'increasing' | 'decreasing' | 'stable' = 'stable';
    if (averageGrowthRate > 2) trend = 'increasing';
    else if (averageGrowthRate < -2) trend = 'decreasing';
    
    return { trend, averageGrowthRate, volatility };
  }
  
  // Data completeness scoring
  static calculateDataCompleteness(profile: ComprehensiveFinancialProfile): number {
    let score = 0;
    const maxScore = 100;
    
    // Years of data (30 points max)
    const yearsOfData = Math.max(
      profile.incomeHistory.length,
      profile.expenseHistory.length,
      profile.netWorthHistory.length
    );
    score += Math.min(yearsOfData * 5, 30);
    
    // Current year data completeness (40 points max)
    const currentYear = new Date().getFullYear();
    const hasCurrentIncome = profile.incomeHistory.some(r => r.year === currentYear && r.employmentIncome > 0);
    const hasCurrentExpenses = profile.expenseHistory.some(r => r.year === currentYear && r.totalExpenses > 0);
    const hasCurrentNetWorth = profile.netWorthHistory.some(r => r.year === currentYear);
    
    if (hasCurrentIncome) score += 15;
    if (hasCurrentExpenses) score += 15;
    if (hasCurrentNetWorth) score += 10;
    
    // Strategic planning completeness (30 points max)
    if (profile.portfolioStrategy.strategyName) score += 10;
    if (profile.srsPlanning.contributionHistory.length > 0) score += 10;
    if (profile.fiPlanning.customFIAmount > 0) score += 10;
    
    return Math.min(score, maxScore);
  }
}

// EXPORT ALL INTERFACES
export type {
  ComprehensiveFinancialProfile as FinancialProfile, // Main interface
  IncomeRecord,
  ExpenseRecord,
  SavingsRecord,
  NetWorthRecord,
  PortfolioAllocationStrategy,
  SRSPlan,
  FIPlan
};