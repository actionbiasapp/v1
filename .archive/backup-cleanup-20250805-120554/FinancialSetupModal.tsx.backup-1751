'use client';

import { useState, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { FinancialProfile, createDefaultFinancialProfile } from '@/app/lib/types/shared';

// FIXED: Remove local interface, use shared one
const DEFAULT_PROFILE: FinancialProfile = createDefaultFinancialProfile();

interface FinancialSetupModalProps {
  isOpen: boolean;
  onClose: () => void;
  onProfileUpdate?: (profile: FinancialProfile) => void;
  initialProfile?: FinancialProfile;
}

interface YearlyData {
  year: number;
  income: number;
  expenses: number;
  savings: number;
  netWorth: number;
}

export default function FinancialSetupModal({ 
  isOpen, 
  onClose, 
  onProfileUpdate,
  initialProfile 
}: FinancialSetupModalProps) {
  const [profile, setProfile] = useState<FinancialProfile>(DEFAULT_PROFILE);
  const [yearlyData, setYearlyData] = useState<YearlyData[]>([]);
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState(0);
  const [showAddYear, setShowAddYear] = useState(false);

  // Load existing profile
  useEffect(() => {
    if (isOpen) {
      if (initialProfile) {
        setProfile(initialProfile);
      } else {
        loadProfile();
      }
    }
  }, [isOpen, initialProfile]);

  const loadProfile = async () => {
    try {
      const response = await fetch('/api/financial-profile');
      if (response.ok) {
        const data = await response.json();
        if (data.success && data.profile) {
          setProfile(data.profile);
          setYearlyData(data.yearlyData || []);
        }
      }
    } catch (error) {
      console.error('Failed to load profile:', error);
    }
  };

  const saveProfile = async () => {
    setLoading(true);
    try {
      // FIXED: Structure data correctly for API
      const saveData = {
        profile: {
          // Map modal fields to shared interface
          annualIncome: profile.annualIncome,
          incomeCurrency: profile.incomeCurrency || 'SGD',
          taxStatus: profile.taxStatus || 'Employment Pass',
          currentSRSContributions: profile.currentSRSContributions || 0,
          fiGoal: profile.fiGoal || 2500000,
          fiTargetYear: profile.fiTargetYear || 2032,
          srsAutoOptimize: profile.srsAutoOptimize !== false,
          firstMillionTarget: profile.firstMillionTarget !== false,
          
          // Optional fields
          bonusIncome: profile.bonusIncome,
          otherIncome: profile.otherIncome,
          customFIAmount: profile.customFIAmount,
          customTargetYear: profile.customTargetYear,
          
          // Portfolio targets with defaults
          coreTarget: profile.coreTarget || 25,
          growthTarget: profile.growthTarget || 55,
          hedgeTarget: profile.hedgeTarget || 10,
          liquidityTarget: profile.liquidityTarget || 10,
          rebalanceThreshold: profile.rebalanceThreshold || 5,
          
          // Profile management
          profileCompleteness: calculateCompleteness()
        },
        yearlyData: yearlyData
      };

      console.log('Saving data:', saveData);
      
      const response = await fetch('/api/financial-profile', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(saveData)
      });
      
      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          onProfileUpdate?.(saveData.profile);
          onClose();
        } else {
          alert(`Failed to save: ${result.error || 'Unknown error'}`);
        }
      } else {
        const errorData = await response.text();
        alert(`Save failed: ${response.status} - ${errorData}`);
      }
    } catch (error) {
      console.error('Save failed:', error);
      alert('Save failed: Network error');
    } finally {
      setLoading(false);
    }
  };

  const calculateCompleteness = (): number => {
    let completed = 0;
    const fields = [
      profile.annualIncome,
      profile.taxStatus,
      profile.currentSRSContributions !== undefined,
      profile.fiGoal,
      profile.fiTargetYear
    ];
    
    fields.forEach(field => {
      if (field !== undefined && field !== null && field !== 0) completed++;
    });
    
    return Math.round((completed / fields.length) * 100);
  };

  const addYear = (year: number, income: number, expenses: number, netWorth: number) => {
    const savings = income - expenses;
    const newYear = { year, income, expenses, savings, netWorth };
    setYearlyData(prev => [...prev, newYear].sort((a, b) => b.year - a.year));
    setShowAddYear(false);
  };

  if (!isOpen) return null;

  const tabs = ['ðŸ’° Profile', 'ðŸ“Š Historical Data'];
  const srsMax = profile.taxStatus === 'Employment Pass' ? 35700 : 15000;
  const currentNetWorth = profile.annualIncome ? profile.annualIncome * 4 : 489000; // Estimate
  const fiProgress = (currentNetWorth / (profile.fiGoal || 2500000)) * 100;

  return createPortal(
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-slate-800 rounded-2xl border border-slate-700 w-full max-w-2xl max-h-[85vh] flex flex-col">
        
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-slate-700">
          <h2 className="text-lg font-semibold text-white">Financial Setup</h2>
          <button onClick={onClose} className="text-slate-400 hover:text-white">âœ•</button>
        </div>

        {/* Tabs */}
        <div className="flex border-b border-slate-700">
          {tabs.map((tab, index) => (
            <button
              key={index}
              onClick={() => setActiveTab(index)}
              className={`flex-1 p-3 text-sm font-medium transition-colors ${
                activeTab === index 
                  ? 'text-white bg-slate-700/50 border-b-2 border-blue-500' 
                  : 'text-slate-400 hover:text-white'
              }`}
            >
              {tab}
            </button>
          ))}
        </div>

        {/* Content */}
        <div className="flex-1 overflow-y-auto p-4">
          {activeTab === 0 && (
            <div className="space-y-4">
              {/* Current Profile - FIXED: Use shared interface fields */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm text-slate-300 mb-1">Annual Income (S$)</label>
                  <input
                    type="number"
                    value={profile.annualIncome || ''}
                    onChange={(e) => setProfile(prev => ({...prev, annualIncome: Number(e.target.value) || undefined}))}
                    className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white"
                    placeholder="120000"
                  />
                </div>
                <div>
                  <label className="block text-sm text-slate-300 mb-1">Tax Status</label>
                  <select
                    value={profile.taxStatus || 'Employment Pass'}
                    onChange={(e) => setProfile(prev => ({...prev, taxStatus: e.target.value as 'Employment Pass' | 'Citizen' | 'PR'}))}
                    className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white"
                  >
                    <option value="Employment Pass">Employment Pass</option>
                    <option value="Citizen">Citizen</option>
                    <option value="PR">PR</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm text-slate-300 mb-1">FI Target (S$)</label>
                  <input
                    type="number"
                    value={profile.fiGoal || ''}
                    onChange={(e) => setProfile(prev => ({...prev, fiGoal: Number(e.target.value) || 2500000}))}
                    className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white"
                    placeholder="2500000"
                  />
                </div>
                <div>
                  <label className="block text-sm text-slate-300 mb-1">FI Target Year</label>
                  <input
                    type="number"
                    value={profile.fiTargetYear || ''}
                    onChange={(e) => setProfile(prev => ({...prev, fiTargetYear: Number(e.target.value) || 2032}))}
                    className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white"
                    placeholder="2032"
                  />
                </div>
                <div>
                  <label className="block text-sm text-slate-300 mb-1">SRS Contributions 2025 (S$)</label>
                  <input
                    type="number"
                    value={profile.currentSRSContributions || ''}
                    onChange={(e) => setProfile(prev => ({...prev, currentSRSContributions: Number(e.target.value) || 0}))}
                    className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white"
                    placeholder="0"
                  />
                </div>
              </div>

              {/* FI Progress */}
              <div className="bg-slate-700/30 rounded-lg p-4">
                <div className="flex justify-between text-sm mb-2">
                  <span className="text-slate-300">FI Progress</span>
                  <span className="text-white">{fiProgress.toFixed(1)}%</span>
                </div>
                <div className="w-full bg-slate-600 rounded-full h-3">
                  <div 
                    className="h-3 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full"
                    style={{ width: `${Math.min(fiProgress, 100)}%` }}
                  />
                </div>
              </div>

              {/* SRS Progress */}
              <div className="bg-slate-700/30 rounded-lg p-4">
                <div className="flex justify-between text-sm mb-2">
                  <span className="text-slate-300">SRS Contributions</span>
                  <span className="text-white">{(((profile.currentSRSContributions || 0) / srsMax) * 100).toFixed(1)}%</span>
                </div>
                <div className="w-full bg-slate-600 rounded-full h-3">
                  <div 
                    className="h-3 bg-gradient-to-r from-emerald-500 to-green-500 rounded-full"
                    style={{ width: `${Math.min(((profile.currentSRSContributions || 0) / srsMax) * 100, 100)}%` }}
                  />
                </div>
                <div className="text-xs text-slate-400 mt-1">
                  S${(profile.currentSRSContributions || 0).toLocaleString()} of S${srsMax.toLocaleString()} limit
                </div>
              </div>
            </div>
          )}

          {activeTab === 1 && (
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <h3 className="font-medium text-white">Historical Data</h3>
                <button
                  onClick={() => setShowAddYear(true)}
                  className="px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700"
                >
                  Add Year
                </button>
              </div>

              {yearlyData.length > 0 ? (
                <div className="space-y-2">
                  {yearlyData.map((year) => (
                    <div key={year.year} className="bg-slate-700/30 rounded-lg p-3">
                      <div className="grid grid-cols-4 gap-4 text-sm">
                        <div>
                          <div className="text-slate-400">Year</div>
                          <div className="text-white font-medium">{year.year}</div>
                        </div>
                        <div>
                          <div className="text-slate-400">Income</div>
                          <div className="text-blue-400">S${year.income.toLocaleString()}</div>
                        </div>
                        <div>
                          <div className="text-slate-400">Savings</div>
                          <div className="text-emerald-400">S${year.savings.toLocaleString()}</div>
                        </div>
                        <div>
                          <div className="text-slate-400">Net Worth</div>
                          <div className="text-white">S${year.netWorth.toLocaleString()}</div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-slate-400 text-center py-8">
                  No historical data yet. Add years to track your financial journey.
                </div>
              )}

              {/* Add Year Modal */}
              {showAddYear && (
                <AddYearModal
                  onAdd={addYear}
                  onClose={() => setShowAddYear(false)}
                />
              )}
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="border-t border-slate-700 p-4 flex justify-end gap-3">
          <button onClick={onClose} className="px-4 py-2 text-slate-400 hover:text-white">
            Cancel
          </button>
          <button 
            onClick={saveProfile}
            disabled={loading}
            className="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 disabled:opacity-50"
          >
            {loading ? 'Saving...' : 'Save'}
          </button>
        </div>
      </div>
    </div>,
    document.body
  );
}

// Add Year Modal Component
function AddYearModal({ onAdd, onClose }: {
  onAdd: (year: number, income: number, expenses: number, netWorth: number) => void;
  onClose: () => void;
}) {
  const [year, setYear] = useState(new Date().getFullYear() - 1);
  const [income, setIncome] = useState('');
  const [expenses, setExpenses] = useState('');
  const [netWorth, setNetWorth] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onAdd(year, Number(income), Number(expenses), Number(netWorth));
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-10">
      <div className="bg-slate-800 rounded-xl p-6 w-full max-w-md border border-slate-700">
        <h3 className="text-lg font-bold text-white mb-4">Add Year Data</h3>
        
        <form onSubmit={handleSubmit} className="space-y-3">
          <div>
            <label className="block text-sm text-slate-400 mb-1">Year</label>
            <input
              type="number"
              value={year}
              onChange={(e) => setYear(Number(e.target.value))}
              className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white"
              required
            />
          </div>
          <div>
            <label className="block text-sm text-slate-400 mb-1">Income (S$)</label>
            <input
              type="number"
              value={income}
              onChange={(e) => setIncome(e.target.value)}
              placeholder="120000"
              className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white"
              required
            />
          </div>
          <div>
            <label className="block text-sm text-slate-400 mb-1">Expenses (S$)</label>
            <input
              type="number"
              value={expenses}
              onChange={(e) => setExpenses(e.target.value)}
              placeholder="72000"
              className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white"
              required
            />
          </div>
          <div>
            <label className="block text-sm text-slate-400 mb-1">Net Worth (S$)</label>
            <input
              type="number"
              value={netWorth}
              onChange={(e) => setNetWorth(e.target.value)}
              placeholder="350000"
              className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white"
              required
            />
          </div>
          
          <div className="flex gap-2 pt-4">
            <button
              type="button"
              onClick={onClose}
              className="flex-1 px-3 py-2 bg-slate-600 text-white rounded hover:bg-slate-700"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="flex-1 px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            >
              Add Year
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}